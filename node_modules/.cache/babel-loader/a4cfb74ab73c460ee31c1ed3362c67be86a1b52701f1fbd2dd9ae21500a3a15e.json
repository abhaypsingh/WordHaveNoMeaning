{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getEducationalMessage, getConceptExplanation, getGameTakeaways } from '../../services/educationalService';\n\n// Initial state\nconst initialState = {\n  messages: [],\n  concepts: [],\n  takeaways: [],\n  currentMessage: null,\n  currentConcept: null,\n  loading: false,\n  error: null,\n  conceptExposures: {},\n  // Track concept exposures for spaced repetition\n  learningStage: 'introduction' // introduction, exploration, contradiction, conceptualization, application, synthesis\n};\n\n// Async thunks\nexport const fetchEducationalMessage = createAsyncThunk('educational/fetchMessage', async ({\n  word,\n  selectedMeaning,\n  contradictionMeaning\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const message = await getEducationalMessage(word, selectedMeaning, contradictionMeaning);\n    return message;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchConceptExplanation = createAsyncThunk('educational/fetchConcept', async (conceptId, {\n  rejectWithValue\n}) => {\n  try {\n    const concept = await getConceptExplanation(conceptId);\n    return concept;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchGameTakeaways = createAsyncThunk('educational/fetchTakeaways', async (encounteredConcepts, {\n  rejectWithValue\n}) => {\n  try {\n    const takeaways = await getGameTakeaways(encounteredConcepts);\n    return takeaways;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Create slice\nconst educationalSlice = createSlice({\n  name: 'educational',\n  initialState,\n  reducers: {\n    recordConceptExposure: (state, action) => {\n      const conceptId = action.payload;\n      if (!state.conceptExposures[conceptId]) {\n        state.conceptExposures[conceptId] = [];\n      }\n      state.conceptExposures[conceptId].push(new Date().toISOString());\n    },\n    setLearningStage: (state, action) => {\n      state.learningStage = action.payload;\n    },\n    resetEducationalState: state => {\n      state.currentMessage = null;\n      state.currentConcept = null;\n      state.takeaways = [];\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch educational message\n    .addCase(fetchEducationalMessage.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchEducationalMessage.fulfilled, (state, action) => {\n      state.currentMessage = action.payload;\n\n      // Add to messages if not already present\n      if (!state.messages.some(msg => msg.id === action.payload.id)) {\n        state.messages.push(action.payload);\n      }\n      state.loading = false;\n    }).addCase(fetchEducationalMessage.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Fetch concept explanation\n    .addCase(fetchConceptExplanation.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchConceptExplanation.fulfilled, (state, action) => {\n      state.currentConcept = action.payload;\n\n      // Add to concepts if not already present\n      if (!state.concepts.some(concept => concept.id === action.payload.id)) {\n        state.concepts.push(action.payload);\n      }\n      state.loading = false;\n    }).addCase(fetchConceptExplanation.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Fetch game takeaways\n    .addCase(fetchGameTakeaways.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchGameTakeaways.fulfilled, (state, action) => {\n      state.takeaways = action.payload;\n      state.loading = false;\n    }).addCase(fetchGameTakeaways.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\n\n// Export actions and reducer\nexport const {\n  recordConceptExposure,\n  setLearningStage,\n  resetEducationalState\n} = educationalSlice.actions;\nexport default educationalSlice.reducer;\n\n// Selectors\nexport const selectCurrentMessage = state => state.educational.currentMessage;\nexport const selectCurrentConcept = state => state.educational.currentConcept;\nexport const selectTakeaways = state => state.educational.takeaways;\nexport const selectEducationalLoading = state => state.educational.loading;\nexport const selectEducationalError = state => state.educational.error;\nexport const selectConceptExposures = state => state.educational.conceptExposures;\nexport const selectLearningStage = state => state.educational.learningStage;\n\n// Helper selector to determine if a concept should be reinforced\nexport const selectShouldReinforce = (state, conceptId) => {\n  const exposures = state.educational.conceptExposures[conceptId];\n  if (!exposures || exposures.length === 0) {\n    return false; // No exposures yet, so no need to reinforce\n  }\n\n  // Get the last exposure time\n  const lastExposure = new Date(exposures[exposures.length - 1]);\n  const now = new Date();\n\n  // Calculate time since last exposure in hours\n  const hoursSinceLastExposure = (now - lastExposure) / (1000 * 60 * 60);\n\n  // Simple spaced repetition algorithm:\n  // - First reinforcement after 1 hour\n  // - Second reinforcement after 3 hours\n  // - Third reinforcement after 8 hours\n  // - Fourth reinforcement after 24 hours\n\n  switch (exposures.length) {\n    case 1:\n      return hoursSinceLastExposure >= 1;\n    case 2:\n      return hoursSinceLastExposure >= 3;\n    case 3:\n      return hoursSinceLastExposure >= 8;\n    case 4:\n      return hoursSinceLastExposure >= 24;\n    default:\n      return false;\n    // Already reinforced enough\n  }\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","getEducationalMessage","getConceptExplanation","getGameTakeaways","initialState","messages","concepts","takeaways","currentMessage","currentConcept","loading","error","conceptExposures","learningStage","fetchEducationalMessage","word","selectedMeaning","contradictionMeaning","rejectWithValue","message","fetchConceptExplanation","conceptId","concept","fetchGameTakeaways","encounteredConcepts","educationalSlice","name","reducers","recordConceptExposure","state","action","payload","push","Date","toISOString","setLearningStage","resetEducationalState","extraReducers","builder","addCase","pending","fulfilled","some","msg","id","rejected","actions","reducer","selectCurrentMessage","educational","selectCurrentConcept","selectTakeaways","selectEducationalLoading","selectEducationalError","selectConceptExposures","selectLearningStage","selectShouldReinforce","exposures","length","lastExposure","now","hoursSinceLastExposure"],"sources":["C:/Users/abhay/Downloads/WordsEmptyMeaning/src/store/slices/educationalSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getEducationalMessage, getConceptExplanation, getGameTakeaways } from '../../services/educationalService';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  messages: [],\r\n  concepts: [],\r\n  takeaways: [],\r\n  currentMessage: null,\r\n  currentConcept: null,\r\n  loading: false,\r\n  error: null,\r\n  conceptExposures: {}, // Track concept exposures for spaced repetition\r\n  learningStage: 'introduction', // introduction, exploration, contradiction, conceptualization, application, synthesis\r\n};\r\n\r\n// Async thunks\r\nexport const fetchEducationalMessage = createAsyncThunk(\r\n  'educational/fetchMessage',\r\n  async ({ word, selectedMeaning, contradictionMeaning }, { rejectWithValue }) => {\r\n    try {\r\n      const message = await getEducationalMessage(word, selectedMeaning, contradictionMeaning);\r\n      return message;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchConceptExplanation = createAsyncThunk(\r\n  'educational/fetchConcept',\r\n  async (conceptId, { rejectWithValue }) => {\r\n    try {\r\n      const concept = await getConceptExplanation(conceptId);\r\n      return concept;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchGameTakeaways = createAsyncThunk(\r\n  'educational/fetchTakeaways',\r\n  async (encounteredConcepts, { rejectWithValue }) => {\r\n    try {\r\n      const takeaways = await getGameTakeaways(encounteredConcepts);\r\n      return takeaways;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n// Create slice\r\nconst educationalSlice = createSlice({\r\n  name: 'educational',\r\n  initialState,\r\n  reducers: {\r\n    recordConceptExposure: (state, action) => {\r\n      const conceptId = action.payload;\r\n      \r\n      if (!state.conceptExposures[conceptId]) {\r\n        state.conceptExposures[conceptId] = [];\r\n      }\r\n      \r\n      state.conceptExposures[conceptId].push(new Date().toISOString());\r\n    },\r\n    setLearningStage: (state, action) => {\r\n      state.learningStage = action.payload;\r\n    },\r\n    resetEducationalState: (state) => {\r\n      state.currentMessage = null;\r\n      state.currentConcept = null;\r\n      state.takeaways = [];\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch educational message\r\n      .addCase(fetchEducationalMessage.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchEducationalMessage.fulfilled, (state, action) => {\r\n        state.currentMessage = action.payload;\r\n        \r\n        // Add to messages if not already present\r\n        if (!state.messages.some(msg => msg.id === action.payload.id)) {\r\n          state.messages.push(action.payload);\r\n        }\r\n        \r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchEducationalMessage.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Fetch concept explanation\r\n      .addCase(fetchConceptExplanation.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchConceptExplanation.fulfilled, (state, action) => {\r\n        state.currentConcept = action.payload;\r\n        \r\n        // Add to concepts if not already present\r\n        if (!state.concepts.some(concept => concept.id === action.payload.id)) {\r\n          state.concepts.push(action.payload);\r\n        }\r\n        \r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchConceptExplanation.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Fetch game takeaways\r\n      .addCase(fetchGameTakeaways.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchGameTakeaways.fulfilled, (state, action) => {\r\n        state.takeaways = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchGameTakeaways.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\n// Export actions and reducer\r\nexport const {\r\n  recordConceptExposure,\r\n  setLearningStage,\r\n  resetEducationalState,\r\n} = educationalSlice.actions;\r\n\r\nexport default educationalSlice.reducer;\r\n\r\n// Selectors\r\nexport const selectCurrentMessage = (state) => state.educational.currentMessage;\r\nexport const selectCurrentConcept = (state) => state.educational.currentConcept;\r\nexport const selectTakeaways = (state) => state.educational.takeaways;\r\nexport const selectEducationalLoading = (state) => state.educational.loading;\r\nexport const selectEducationalError = (state) => state.educational.error;\r\nexport const selectConceptExposures = (state) => state.educational.conceptExposures;\r\nexport const selectLearningStage = (state) => state.educational.learningStage;\r\n\r\n// Helper selector to determine if a concept should be reinforced\r\nexport const selectShouldReinforce = (state, conceptId) => {\r\n  const exposures = state.educational.conceptExposures[conceptId];\r\n  \r\n  if (!exposures || exposures.length === 0) {\r\n    return false; // No exposures yet, so no need to reinforce\r\n  }\r\n  \r\n  // Get the last exposure time\r\n  const lastExposure = new Date(exposures[exposures.length - 1]);\r\n  const now = new Date();\r\n  \r\n  // Calculate time since last exposure in hours\r\n  const hoursSinceLastExposure = (now - lastExposure) / (1000 * 60 * 60);\r\n  \r\n  // Simple spaced repetition algorithm:\r\n  // - First reinforcement after 1 hour\r\n  // - Second reinforcement after 3 hours\r\n  // - Third reinforcement after 8 hours\r\n  // - Fourth reinforcement after 24 hours\r\n  \r\n  switch (exposures.length) {\r\n    case 1:\r\n      return hoursSinceLastExposure >= 1;\r\n    case 2:\r\n      return hoursSinceLastExposure >= 3;\r\n    case 3:\r\n      return hoursSinceLastExposure >= 8;\r\n    case 4:\r\n      return hoursSinceLastExposure >= 24;\r\n    default:\r\n      return false; // Already reinforced enough\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}