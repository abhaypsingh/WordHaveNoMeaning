{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhay\\\\Downloads\\\\WordHaveNoMeaning\\\\src\\\\screens\\\\GameplayScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Header from '../components/common/Header';\nimport ProgressBar from '../components/common/ProgressBar';\nimport Button from '../components/common/Button';\nimport WordDisplay from '../components/game/WordDisplay';\nimport OptionButton from '../components/game/OptionButton';\nimport TimerDisplay from '../components/game/TimerDisplay';\nimport ContradictionDisplay from '../components/game/ContradictionDisplay';\nimport { selectGameSession, selectCurrentRound, startNextRound, processUserSelection, completeGame, restoreSession, clearRoundSelection } from '../store/slices/gameSlice';\nimport { fetchEducationalMessage } from '../store/slices/educationalSlice';\nimport { selectCurrentMessage } from '../store/slices/educationalSlice';\nimport { _playOptionSelect, playCorrectAnswer, playIncorrectAnswer, playContradictionReveal, playRoundComplete } from '../services/soundService';\nimport { getContradictionSentence } from '../services/gameService';\nimport { saveCurrentGame, recoverGameSession } from '../services/storageService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: var(--color-background);\n`;\n_c = Container;\nconst Content = styled.div`\n  flex: 1;\n  padding: var(--spacing-md);\n  max-width: 800px;\n  margin: 0 auto;\n  width: 100%;\n`;\n_c2 = Content;\nconst ScoreDisplay = styled.div`\n  text-align: center;\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: var(--spacing-md);\n  color: var(--color-primary);\n`;\n_c3 = ScoreDisplay;\nconst OptionsContainer = styled.div`\n  margin-bottom: var(--spacing-lg);\n`;\n_c4 = OptionsContainer;\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: var(--spacing-lg);\n`;\n\n/**\r\n * GameplayScreen component for the main gameplay experience\r\n * @returns {JSX.Element} - Rendered component\r\n */\n_c5 = ButtonContainer;\nconst GameplayScreen = () => {\n  _s();\n  var _gameSession$settings2;\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const gameSession = useSelector(selectGameSession);\n  const currentRound = useSelector(selectCurrentRound);\n  const educationalMessage = useSelector(selectCurrentMessage);\n\n  // Local state\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [showContradiction, setShowContradiction] = useState(false);\n  const [contradictionData, setContradictionData] = useState(null);\n  const [timerInterval, setTimerInterval] = useState(null);\n\n  // Reference to track if component is mounted\n  const isMounted = useRef(true);\n\n  // Check if game session exists and handle recovery\n  useEffect(() => {\n    if (!gameSession) {\n      // Try to recover game session\n      const recoveredSession = recoverGameSession();\n      if (recoveredSession) {\n        // If we recovered a session, dispatch an action to restore it\n        dispatch(restoreSession(recoveredSession));\n      } else {\n        navigate('/setup');\n      }\n    } else if (gameSession.completed) {\n      navigate('/results');\n    } else if (gameSession.currentRound === 0) {\n      // Start first round\n      dispatch(startNextRound());\n    } else {\n      // Ensure the current round's selection is cleared when the component mounts\n      // This helps fix the issue where options might be disabled initially\n      dispatch(clearRoundSelection());\n    }\n\n    // Save game session on unmount\n    return () => {\n      isMounted.current = false;\n      if (gameSession && !gameSession.completed) {\n        saveCurrentGame(gameSession);\n      }\n    };\n  }, [gameSession, navigate, dispatch]);\n\n  // Ensure local state is synchronized with Redux state\n  useEffect(() => {\n    if (currentRound) {\n      // Reset selectedOption when the round changes or if it's a new round\n      if (!currentRound.completed) {\n        setSelectedOption(null);\n        setShowContradiction(false);\n        setContradictionData(null);\n      }\n    }\n  }, [currentRound]);\n\n  // Periodically save game state during gameplay\n  useEffect(() => {\n    if (!gameSession) return;\n    const saveInterval = setInterval(() => {\n      if (gameSession && !gameSession.completed) {\n        saveCurrentGame(gameSession);\n      }\n    }, 10000); // Save every 10 seconds\n\n    return () => clearInterval(saveInterval);\n  }, [gameSession]);\n\n  // Set up timer when round changes\n  useEffect(() => {\n    var _gameSession$settings;\n    if (currentRound && !currentRound.completed && (gameSession === null || gameSession === void 0 ? void 0 : (_gameSession$settings = gameSession.settings) === null || _gameSession$settings === void 0 ? void 0 : _gameSession$settings.timeLimit) > 0) {\n      setTimeRemaining(gameSession.settings.timeLimit);\n\n      // Clear any existing timer\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n\n      // Start new timer\n      const interval = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 0) {\n            clearInterval(interval);\n            return 0;\n          }\n          return prev - 0.1;\n        });\n      }, 100);\n      setTimerInterval(interval);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [currentRound, gameSession === null || gameSession === void 0 ? void 0 : (_gameSession$settings2 = gameSession.settings) === null || _gameSession$settings2 === void 0 ? void 0 : _gameSession$settings2.timeLimit]);\n\n  // Handle timer expiration\n  useEffect(() => {\n    if (timeRemaining <= 0 && currentRound && !currentRound.completed && !selectedOption) {\n      // Time expired, select a random option\n      const randomIndex = Math.floor(Math.random() * currentRound.options.length);\n      handleOptionSelect(randomIndex);\n    }\n  }, [timeRemaining, currentRound, selectedOption]);\n\n  // Clean up timer on unmount\n  useEffect(() => {\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [timerInterval]);\n\n  // Handle option selection\n  const handleOptionSelect = useCallback(optionIndex => {\n    console.log(\"handleOptionSelect called with optionIndex:\", optionIndex);\n    console.log(\"Current state:\", {\n      currentRound: currentRound ? {\n        roundNumber: currentRound.roundNumber,\n        completed: currentRound.completed\n      } : null,\n      selectedOption,\n      timeRemaining\n    });\n    if (currentRound && !currentRound.completed && selectedOption === null) {\n      // Stop timer\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n\n      // Set selected option\n      setSelectedOption(optionIndex);\n\n      // Process selection\n      const timeSpent = gameSession.settings.timeLimit > 0 ? gameSession.settings.timeLimit - timeRemaining : 0;\n      dispatch(processUserSelection({\n        optionIndex,\n        timeSpent\n      }));\n\n      // Play sound based on correctness\n      const selectedOptionData = currentRound.options[optionIndex];\n      if (selectedOptionData.isCorrect) {\n        playCorrectAnswer();\n      } else {\n        playIncorrectAnswer();\n      }\n\n      // Show contradiction after a delay\n\n      setTimeout(async () => {\n        try {\n          // Get contradiction data\n          let data;\n          try {\n            data = await getContradictionSentence(gameSession);\n          } catch (error) {\n            var _currentRound$correct;\n            console.error('Error getting contradiction data, using fallback:', error);\n            // Create fallback data if getContradictionSentence fails\n            data = {\n              sentence: `This is an example where \"${currentRound.word.text}\" has a different meaning.`,\n              highlightedSentence: `This is an example where \"<span class=\"highlight\">${currentRound.word.text}</span>\" has a different meaning.`,\n              meaning: ((_currentRound$correct = currentRound.correctMeaning) === null || _currentRound$correct === void 0 ? void 0 : _currentRound$correct.definition) || \"a different meaning\",\n              explanation: `In this context, \"${currentRound.word.text}\" means something different than the meaning you selected.`\n            };\n          }\n          setContradictionData(data);\n\n          // Get educational message\n\n          try {\n            dispatch(fetchEducationalMessage({\n              word: currentRound.word,\n              selectedMeaning: currentRound.options[optionIndex],\n              contradictionMeaning: currentRound.correctMeaning\n            }));\n          } catch (error) {\n            console.error('Error fetching educational message:', error);\n          }\n\n          // Show contradiction\n\n          setShowContradiction(true);\n          playContradictionReveal();\n        } catch (error) {\n          console.error('Error showing contradiction:', error);\n          // Even if there's an error, still show the contradiction phase with a fallback message\n          setContradictionData({\n            sentence: \"Error loading contradiction example.\",\n            highlightedSentence: \"Error loading contradiction example.\",\n            meaning: \"different meaning\",\n            explanation: \"There was an error loading the contradiction example.\"\n          });\n          setShowContradiction(true);\n        }\n      }, 1000);\n    } else {\n      console.log(\"Conditions NOT met for option selection:\", {\n        currentRoundExists: !!currentRound,\n        roundNotCompleted: currentRound ? !currentRound.completed : false,\n        selectedOptionIsNull: selectedOption === null\n      });\n    }\n  }, [currentRound, selectedOption, gameSession, timeRemaining, timerInterval, dispatch]);\n\n  // Handle next word button\n  const handleNextWord = useCallback(() => {\n    // Reset state\n    setSelectedOption(null);\n    setShowContradiction(false);\n    setContradictionData(null);\n\n    // Play sound\n    playRoundComplete();\n\n    // Check if this was the last round\n    if (gameSession.currentRound >= gameSession.totalRounds) {\n      // Complete game\n      dispatch(completeGame());\n      navigate('/results');\n    } else {\n      console.log(\"Starting next round\");\n      // Start next round\n      dispatch(startNextRound());\n    }\n  }, [gameSession, dispatch, navigate]);\n\n  // Handle pause/exit\n  const handlePause = () => {\n    // Implement pause functionality if needed\n    // For now, just navigate back to setup\n    if (timerInterval) {\n      clearInterval(timerInterval);\n    }\n    navigate('/setup');\n  };\n\n  // If no game session or current round, show loading\n  if (!gameSession || !currentRound) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Loading...\",\n        showBackButton: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Content, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            marginTop: '2rem'\n          },\n          role: \"status\",\n          \"aria-live\": \"polite\",\n          children: \"Loading game...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: `Round ${currentRound.roundNumber}/${gameSession.totalRounds}`,\n      showBackButton: true,\n      onBackClick: handlePause\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        current: currentRound.roundNumber,\n        total: gameSession.totalRounds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n        children: [\"Score: \", gameSession.score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        role: \"region\",\n        \"aria-live\": \"polite\",\n        children: !showContradiction ?\n        /*#__PURE__*/\n        // Word presentation phase\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(WordDisplay, {\n            word: currentRound.word.text,\n            instruction: \"Select the meaning of this word:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this), gameSession.settings.timeLimit > 0 && /*#__PURE__*/_jsxDEV(TimerDisplay, {\n            timeRemaining: timeRemaining,\n            timeLimit: gameSession.settings.timeLimit,\n            onTimeExpired: () => {\n              if (selectedOption === null && !currentRound.completed) {\n                const randomIndex = Math.floor(Math.random() * currentRound.options.length);\n                handleOptionSelect(randomIndex);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(OptionsContainer, {\n            role: \"radiogroup\",\n            \"aria-label\": \"Word meaning options\",\n            children: currentRound.options.map((option, index) => /*#__PURE__*/_jsxDEV(OptionButton, {\n              text: option.text,\n              index: index,\n              selected: selectedOption === index,\n              disabled: selectedOption !== null,\n              onClick: () => handleOptionSelect(index),\n              \"aria-checked\": selectedOption === index,\n              role: \"radio\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) :\n        /*#__PURE__*/\n        // Contradiction phase\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(WordDisplay, {\n            word: currentRound.word.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ContradictionDisplay, {\n            contradictionData: contradictionData,\n            selectedMeaning: selectedOption !== null && currentRound.options[selectedOption] ? currentRound.options[selectedOption].text : \"selected meaning\",\n            educationalMessage: educationalMessage === null || educationalMessage === void 0 ? void 0 : educationalMessage.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: \"Next Word\",\n              onClick: () => {\n                console.log(\"Next Word button clicked\");\n                handleNextWord();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 5\n  }, this);\n};\n_s(GameplayScreen, \"7Uc9wYLKA4pojRdRO4xXVWu39fQ=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector, useSelector];\n});\n_c6 = GameplayScreen;\nexport default GameplayScreen;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"ScoreDisplay\");\n$RefreshReg$(_c4, \"OptionsContainer\");\n$RefreshReg$(_c5, \"ButtonContainer\");\n$RefreshReg$(_c6, \"GameplayScreen\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useDispatch","useSelector","useNavigate","styled","Header","ProgressBar","Button","WordDisplay","OptionButton","TimerDisplay","ContradictionDisplay","selectGameSession","selectCurrentRound","startNextRound","processUserSelection","completeGame","restoreSession","clearRoundSelection","fetchEducationalMessage","selectCurrentMessage","_playOptionSelect","playCorrectAnswer","playIncorrectAnswer","playContradictionReveal","playRoundComplete","getContradictionSentence","saveCurrentGame","recoverGameSession","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Content","_c2","ScoreDisplay","_c3","OptionsContainer","_c4","ButtonContainer","_c5","GameplayScreen","_s","_gameSession$settings2","navigate","dispatch","gameSession","currentRound","educationalMessage","selectedOption","setSelectedOption","timeRemaining","setTimeRemaining","showContradiction","setShowContradiction","contradictionData","setContradictionData","timerInterval","setTimerInterval","isMounted","recoveredSession","completed","current","saveInterval","setInterval","clearInterval","_gameSession$settings","settings","timeLimit","interval","prev","randomIndex","Math","floor","random","options","length","handleOptionSelect","optionIndex","console","log","roundNumber","timeSpent","selectedOptionData","isCorrect","setTimeout","data","error","_currentRound$correct","sentence","word","text","highlightedSentence","meaning","correctMeaning","definition","explanation","selectedMeaning","contradictionMeaning","currentRoundExists","roundNotCompleted","selectedOptionIsNull","handleNextWord","totalRounds","handlePause","children","title","showBackButton","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","marginTop","role","onBackClick","total","score","instruction","onTimeExpired","map","option","index","selected","disabled","onClick","_c6","$RefreshReg$"],"sources":["C:/Users/abhay/Downloads/WordHaveNoMeaning/src/screens/GameplayScreen.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport ProgressBar from '../components/common/ProgressBar';\r\nimport Button from '../components/common/Button';\r\nimport WordDisplay from '../components/game/WordDisplay';\r\nimport OptionButton from '../components/game/OptionButton';\r\nimport TimerDisplay from '../components/game/TimerDisplay';\r\nimport ContradictionDisplay from '../components/game/ContradictionDisplay';\r\nimport {\r\n  selectGameSession,\r\n  selectCurrentRound,\r\n  startNextRound,\r\n  processUserSelection,\r\n  completeGame,\r\n  restoreSession,\r\n  clearRoundSelection\r\n} from '../store/slices/gameSlice';\r\nimport { fetchEducationalMessage } from '../store/slices/educationalSlice';\r\nimport { selectCurrentMessage } from '../store/slices/educationalSlice';\r\nimport {\r\n  _playOptionSelect,\r\n  playCorrectAnswer,\r\n  playIncorrectAnswer,\r\n  playContradictionReveal,\r\n  playRoundComplete\r\n} from '../services/soundService';\r\nimport { getContradictionSentence } from '../services/gameService';\r\nimport { saveCurrentGame, recoverGameSession } from '../services/storageService';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n  background-color: var(--color-background);\r\n`;\r\n\r\nconst Content = styled.div`\r\n  flex: 1;\r\n  padding: var(--spacing-md);\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\nconst ScoreDisplay = styled.div`\r\n  text-align: center;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  margin-bottom: var(--spacing-md);\r\n  color: var(--color-primary);\r\n`;\r\n\r\nconst OptionsContainer = styled.div`\r\n  margin-bottom: var(--spacing-lg);\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: var(--spacing-lg);\r\n`;\r\n\r\n/**\r\n * GameplayScreen component for the main gameplay experience\r\n * @returns {JSX.Element} - Rendered component\r\n */\r\nconst GameplayScreen = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const gameSession = useSelector(selectGameSession);\r\n  const currentRound = useSelector(selectCurrentRound);\r\n  const educationalMessage = useSelector(selectCurrentMessage);\r\n  \r\n  // Local state\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [timeRemaining, setTimeRemaining] = useState(0);\r\n  const [showContradiction, setShowContradiction] = useState(false);\r\n  const [contradictionData, setContradictionData] = useState(null);\r\n  const [timerInterval, setTimerInterval] = useState(null);\r\n  \r\n\r\n  \r\n  // Reference to track if component is mounted\r\n  const isMounted = useRef(true);\r\n  \r\n  // Check if game session exists and handle recovery\r\n  useEffect(() => {\r\n    if (!gameSession) {\r\n      // Try to recover game session\r\n      const recoveredSession = recoverGameSession();\r\n      if (recoveredSession) {\r\n        // If we recovered a session, dispatch an action to restore it\r\n        dispatch(restoreSession(recoveredSession));\r\n      } else {\r\n        navigate('/setup');\r\n      }\r\n    } else if (gameSession.completed) {\r\n      navigate('/results');\r\n    } else if (gameSession.currentRound === 0) {\r\n      // Start first round\r\n      dispatch(startNextRound());\r\n    } else {\r\n      // Ensure the current round's selection is cleared when the component mounts\r\n      // This helps fix the issue where options might be disabled initially\r\n      dispatch(clearRoundSelection());\r\n    }\r\n    \r\n    // Save game session on unmount\r\n    return () => {\r\n      isMounted.current = false;\r\n      if (gameSession && !gameSession.completed) {\r\n        saveCurrentGame(gameSession);\r\n      }\r\n    };\r\n  }, [gameSession, navigate, dispatch]);\r\n  \r\n  // Ensure local state is synchronized with Redux state\r\n  useEffect(() => {\r\n    if (currentRound) {\r\n      // Reset selectedOption when the round changes or if it's a new round\r\n      if (!currentRound.completed) {\r\n        setSelectedOption(null);\r\n        setShowContradiction(false);\r\n        setContradictionData(null);\r\n      }\r\n    }\r\n  }, [currentRound]);\r\n  \r\n  // Periodically save game state during gameplay\r\n  useEffect(() => {\r\n    if (!gameSession) return;\r\n    \r\n    const saveInterval = setInterval(() => {\r\n      if (gameSession && !gameSession.completed) {\r\n        saveCurrentGame(gameSession);\r\n      }\r\n    }, 10000); // Save every 10 seconds\r\n    \r\n    return () => clearInterval(saveInterval);\r\n  }, [gameSession]);\r\n  \r\n  // Set up timer when round changes\r\n  useEffect(() => {\r\n    if (currentRound && !currentRound.completed && gameSession?.settings?.timeLimit > 0) {\r\n      setTimeRemaining(gameSession.settings.timeLimit);\r\n      \r\n      // Clear any existing timer\r\n      if (timerInterval) {\r\n        clearInterval(timerInterval);\r\n      }\r\n      \r\n      // Start new timer\r\n      const interval = setInterval(() => {\r\n        setTimeRemaining(prev => {\r\n          if (prev <= 0) {\r\n            clearInterval(interval);\r\n            return 0;\r\n          }\r\n          return prev - 0.1;\r\n        });\r\n      }, 100);\r\n      \r\n      setTimerInterval(interval);\r\n      \r\n      return () => {\r\n        clearInterval(interval);\r\n      };\r\n    }\r\n  }, [currentRound, gameSession?.settings?.timeLimit]);\r\n  \r\n  // Handle timer expiration\r\n  useEffect(() => {\r\n    if (timeRemaining <= 0 && currentRound && !currentRound.completed && !selectedOption) {\r\n      // Time expired, select a random option\r\n      const randomIndex = Math.floor(Math.random() * currentRound.options.length);\r\n      handleOptionSelect(randomIndex);\r\n    }\r\n  }, [timeRemaining, currentRound, selectedOption]);\r\n  \r\n  // Clean up timer on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timerInterval) {\r\n        clearInterval(timerInterval);\r\n      }\r\n    };\r\n  }, [timerInterval]);\r\n  \r\n  // Handle option selection\r\n  const handleOptionSelect = useCallback((optionIndex) => {\r\n    console.log(\"handleOptionSelect called with optionIndex:\", optionIndex);\r\n    console.log(\"Current state:\", {\r\n      currentRound: currentRound ? {\r\n        roundNumber: currentRound.roundNumber,\r\n        completed: currentRound.completed\r\n      } : null,\r\n      selectedOption,\r\n      timeRemaining\r\n    });\r\n    \r\n    if (currentRound && !currentRound.completed && selectedOption === null) {\r\n      \r\n      \r\n      // Stop timer\r\n      if (timerInterval) {\r\n        clearInterval(timerInterval);\r\n      \r\n      }\r\n      \r\n      // Set selected option\r\n      setSelectedOption(optionIndex);\r\n     \r\n      \r\n      // Process selection\r\n      const timeSpent = gameSession.settings.timeLimit > 0\r\n        ? gameSession.settings.timeLimit - timeRemaining\r\n        : 0;\r\n      \r\n      \r\n      dispatch(processUserSelection({ optionIndex, timeSpent }));\r\n      \r\n      // Play sound based on correctness\r\n      const selectedOptionData = currentRound.options[optionIndex];\r\n      if (selectedOptionData.isCorrect) {\r\n        \r\n        playCorrectAnswer();\r\n      } else {\r\n        \r\n        playIncorrectAnswer();\r\n      }\r\n      \r\n      // Show contradiction after a delay\r\n      \r\n      setTimeout(async () => {\r\n        try {\r\n         \r\n          // Get contradiction data\r\n          let data;\r\n          try {\r\n            data = await getContradictionSentence(gameSession);\r\n         \r\n          } catch (error) {\r\n            console.error('Error getting contradiction data, using fallback:', error);\r\n            // Create fallback data if getContradictionSentence fails\r\n            data = {\r\n              sentence: `This is an example where \"${currentRound.word.text}\" has a different meaning.`,\r\n              highlightedSentence: `This is an example where \"<span class=\"highlight\">${currentRound.word.text}</span>\" has a different meaning.`,\r\n              meaning: currentRound.correctMeaning?.definition || \"a different meaning\",\r\n              explanation: `In this context, \"${currentRound.word.text}\" means something different than the meaning you selected.`\r\n            };\r\n          }\r\n          \r\n          setContradictionData(data);\r\n          \r\n          // Get educational message\r\n          \r\n          try {\r\n            dispatch(fetchEducationalMessage({\r\n              word: currentRound.word,\r\n              selectedMeaning: currentRound.options[optionIndex],\r\n              contradictionMeaning: currentRound.correctMeaning\r\n            }));\r\n          } catch (error) {\r\n            console.error('Error fetching educational message:', error);\r\n          }\r\n          \r\n          // Show contradiction\r\n          \r\n          setShowContradiction(true);\r\n          playContradictionReveal();\r\n        } catch (error) {\r\n          console.error('Error showing contradiction:', error);\r\n          // Even if there's an error, still show the contradiction phase with a fallback message\r\n          setContradictionData({\r\n            sentence: \"Error loading contradiction example.\",\r\n            highlightedSentence: \"Error loading contradiction example.\",\r\n            meaning: \"different meaning\",\r\n            explanation: \"There was an error loading the contradiction example.\"\r\n          });\r\n          setShowContradiction(true);\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      console.log(\"Conditions NOT met for option selection:\", {\r\n        currentRoundExists: !!currentRound,\r\n        roundNotCompleted: currentRound ? !currentRound.completed : false,\r\n        selectedOptionIsNull: selectedOption === null\r\n      });\r\n    }\r\n  }, [currentRound, selectedOption, gameSession, timeRemaining, timerInterval, dispatch]);\r\n  \r\n  // Handle next word button\r\n  const handleNextWord = useCallback(() => {\r\n   \r\n    \r\n    // Reset state\r\n    setSelectedOption(null);\r\n    setShowContradiction(false);\r\n    setContradictionData(null);\r\n    \r\n    // Play sound\r\n    playRoundComplete();\r\n    \r\n    // Check if this was the last round\r\n    if (gameSession.currentRound >= gameSession.totalRounds) {\r\n      \r\n      // Complete game\r\n      dispatch(completeGame());\r\n      navigate('/results');\r\n    } else {\r\n      console.log(\"Starting next round\");\r\n      // Start next round\r\n      dispatch(startNextRound());\r\n    }\r\n  }, [gameSession, dispatch, navigate]);\r\n  \r\n  // Handle pause/exit\r\n  const handlePause = () => {\r\n    // Implement pause functionality if needed\r\n    // For now, just navigate back to setup\r\n    if (timerInterval) {\r\n      clearInterval(timerInterval);\r\n    }\r\n    navigate('/setup');\r\n  };\r\n  \r\n  // If no game session or current round, show loading\r\n  if (!gameSession || !currentRound) {\r\n    return (\r\n      <Container>\r\n        <Header title=\"Loading...\" showBackButton />\r\n        <Content>\r\n          <div\r\n            style={{ textAlign: 'center', marginTop: '2rem' }}\r\n            role=\"status\"\r\n            aria-live=\"polite\"\r\n          >\r\n            Loading game...\r\n          </div>\r\n        </Content>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Container>\r\n      <Header \r\n        title={`Round ${currentRound.roundNumber}/${gameSession.totalRounds}`} \r\n        showBackButton \r\n        onBackClick={handlePause}\r\n      />\r\n      \r\n      <Content>\r\n        <ProgressBar \r\n          current={currentRound.roundNumber} \r\n          total={gameSession.totalRounds} \r\n        />\r\n        \r\n        <ScoreDisplay>\r\n          Score: {gameSession.score}\r\n        </ScoreDisplay>\r\n        \r\n        <div role=\"region\" aria-live=\"polite\">\r\n          {!showContradiction ? (\r\n            // Word presentation phase\r\n            <>\r\n              <WordDisplay\r\n                word={currentRound.word.text}\r\n                instruction=\"Select the meaning of this word:\"\r\n              />\r\n              \r\n              {gameSession.settings.timeLimit > 0 && (\r\n                <TimerDisplay\r\n                  timeRemaining={timeRemaining}\r\n                  timeLimit={gameSession.settings.timeLimit}\r\n                  onTimeExpired={() => {\r\n                    if (selectedOption === null && !currentRound.completed) {\r\n                      const randomIndex = Math.floor(Math.random() * currentRound.options.length);\r\n                      handleOptionSelect(randomIndex);\r\n                    }\r\n                  }}\r\n                />\r\n              )}\r\n              \r\n              <OptionsContainer role=\"radiogroup\" aria-label=\"Word meaning options\">\r\n                {currentRound.options.map((option, index) => (\r\n                  <OptionButton\r\n                    key={index}\r\n                    text={option.text}\r\n                    index={index}\r\n                    selected={selectedOption === index}\r\n                    disabled={selectedOption !== null}\r\n                    onClick={() => handleOptionSelect(index)}\r\n                    aria-checked={selectedOption === index}\r\n                    role=\"radio\"\r\n                  />\r\n                ))}\r\n              </OptionsContainer>\r\n            </>\r\n          ) : (\r\n            // Contradiction phase\r\n            <>\r\n              <WordDisplay word={currentRound.word.text} />\r\n              \r\n              <ContradictionDisplay\r\n                contradictionData={contradictionData}\r\n                selectedMeaning={selectedOption !== null && currentRound.options[selectedOption]\r\n                  ? currentRound.options[selectedOption].text\r\n                  : \"selected meaning\"}\r\n                educationalMessage={educationalMessage?.text}\r\n              />\r\n              \r\n              <ButtonContainer>\r\n                <Button\r\n                  text=\"Next Word\"\r\n                  onClick={() => {\r\n                    console.log(\"Next Word button clicked\");\r\n                    handleNextWord();\r\n                  }}\r\n                />\r\n              </ButtonContainer>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Content>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GameplayScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}