{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhay\\\\Downloads\\\\WordsEmptyMeaning\\\\src\\\\screens\\\\GameplayScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Header from '../components/common/Header';\nimport ProgressBar from '../components/common/ProgressBar';\nimport Button from '../components/common/Button';\nimport WordDisplay from '../components/game/WordDisplay';\nimport OptionButton from '../components/game/OptionButton';\nimport TimerDisplay from '../components/game/TimerDisplay';\nimport ContradictionDisplay from '../components/game/ContradictionDisplay';\nimport { selectGameSession, selectCurrentRound, startNextRound, processUserSelection, completeGame, restoreSession } from '../store/slices/gameSlice';\nimport { fetchEducationalMessage } from '../store/slices/educationalSlice';\nimport { selectCurrentMessage } from '../store/slices/educationalSlice';\nimport { _playOptionSelect, playCorrectAnswer, playIncorrectAnswer, playContradictionReveal, playRoundComplete } from '../services/soundService';\nimport { getContradictionSentence } from '../services/gameService';\nimport { saveCurrentGame, recoverGameSession } from '../services/storageService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: var(--color-background);\n`;\n_c = Container;\nconst Content = styled.div`\n  flex: 1;\n  padding: var(--spacing-md);\n  max-width: 800px;\n  margin: 0 auto;\n  width: 100%;\n`;\n_c2 = Content;\nconst ScoreDisplay = styled.div`\n  text-align: center;\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: var(--spacing-md);\n  color: var(--color-primary);\n`;\n_c3 = ScoreDisplay;\nconst OptionsContainer = styled.div`\n  margin-bottom: var(--spacing-lg);\n`;\n_c4 = OptionsContainer;\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: var(--spacing-lg);\n`;\n\n/**\r\n * GameplayScreen component for the main gameplay experience\r\n * @returns {JSX.Element} - Rendered component\r\n */\n_c5 = ButtonContainer;\nconst GameplayScreen = () => {\n  _s();\n  var _gameSession$settings2;\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const gameSession = useSelector(selectGameSession);\n  const currentRound = useSelector(selectCurrentRound);\n  const educationalMessage = useSelector(selectCurrentMessage);\n\n  // Local state\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [showContradiction, setShowContradiction] = useState(false);\n  const [contradictionData, setContradictionData] = useState(null);\n  const [timerInterval, setTimerInterval] = useState(null);\n\n  // Debug logging\n  console.log(\"GameplayScreen render - selectedOption:\", selectedOption);\n  console.log(\"GameplayScreen render - showContradiction:\", showContradiction);\n\n  // Reference to track if component is mounted\n  const isMounted = useRef(true);\n\n  // Check if game session exists and handle recovery\n  useEffect(() => {\n    if (!gameSession) {\n      // Try to recover game session\n      const recoveredSession = recoverGameSession();\n      if (recoveredSession) {\n        // If we recovered a session, dispatch an action to restore it\n        dispatch(restoreSession(recoveredSession));\n      } else {\n        navigate('/setup');\n      }\n    } else if (gameSession.completed) {\n      navigate('/results');\n    } else if (gameSession.currentRound === 0) {\n      // Start first round\n      dispatch(startNextRound());\n    }\n\n    // Save game session on unmount\n    return () => {\n      isMounted.current = false;\n      if (gameSession && !gameSession.completed) {\n        saveCurrentGame(gameSession);\n      }\n    };\n  }, [gameSession, navigate, dispatch]);\n\n  // Ensure local state is synchronized with Redux state\n  useEffect(() => {\n    if (currentRound) {\n      // Reset selectedOption when the round changes or if it's a new round\n      if (!currentRound.completed) {\n        setSelectedOption(null);\n        setShowContradiction(false);\n        setContradictionData(null);\n      }\n    }\n  }, [currentRound]);\n\n  // Periodically save game state during gameplay\n  useEffect(() => {\n    if (!gameSession) return;\n    const saveInterval = setInterval(() => {\n      if (gameSession && !gameSession.completed) {\n        saveCurrentGame(gameSession);\n      }\n    }, 10000); // Save every 10 seconds\n\n    return () => clearInterval(saveInterval);\n  }, [gameSession]);\n\n  // Set up timer when round changes\n  useEffect(() => {\n    var _gameSession$settings;\n    if (currentRound && !currentRound.completed && (gameSession === null || gameSession === void 0 ? void 0 : (_gameSession$settings = gameSession.settings) === null || _gameSession$settings === void 0 ? void 0 : _gameSession$settings.timeLimit) > 0) {\n      setTimeRemaining(gameSession.settings.timeLimit);\n\n      // Clear any existing timer\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n\n      // Start new timer\n      const interval = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 0) {\n            clearInterval(interval);\n            return 0;\n          }\n          return prev - 0.1;\n        });\n      }, 100);\n      setTimerInterval(interval);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [currentRound, gameSession === null || gameSession === void 0 ? void 0 : (_gameSession$settings2 = gameSession.settings) === null || _gameSession$settings2 === void 0 ? void 0 : _gameSession$settings2.timeLimit]);\n\n  // Handle timer expiration\n  useEffect(() => {\n    if (timeRemaining <= 0 && currentRound && !currentRound.completed && !selectedOption) {\n      // Time expired, select a random option\n      const randomIndex = Math.floor(Math.random() * currentRound.options.length);\n      handleOptionSelect(randomIndex);\n    }\n  }, [timeRemaining, currentRound, selectedOption]);\n\n  // Clean up timer on unmount\n  useEffect(() => {\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [timerInterval]);\n\n  // Handle option selection\n  const handleOptionSelect = useCallback(optionIndex => {\n    console.log(\"handleOptionSelect called with optionIndex:\", optionIndex);\n    console.log(\"Current state:\", {\n      currentRound: currentRound ? {\n        roundNumber: currentRound.roundNumber,\n        completed: currentRound.completed\n      } : null,\n      selectedOption,\n      timeRemaining\n    });\n    if (currentRound && !currentRound.completed && selectedOption === null) {\n      console.log(\"Conditions met for option selection\");\n\n      // Stop timer\n      if (timerInterval) {\n        clearInterval(timerInterval);\n        console.log(\"Timer stopped\");\n      }\n\n      // Set selected option\n      setSelectedOption(optionIndex);\n      console.log(\"Selected option set to:\", optionIndex);\n\n      // Process selection\n      const timeSpent = gameSession.settings.timeLimit > 0 ? gameSession.settings.timeLimit - timeRemaining : 0;\n      console.log(\"Dispatching processUserSelection with:\", {\n        optionIndex,\n        timeSpent\n      });\n      dispatch(processUserSelection({\n        optionIndex,\n        timeSpent\n      }));\n\n      // Play sound based on correctness\n      const selectedOptionData = currentRound.options[optionIndex];\n      if (selectedOptionData.isCorrect) {\n        console.log(\"Correct answer selected\");\n        playCorrectAnswer();\n      } else {\n        console.log(\"Incorrect answer selected\");\n        playIncorrectAnswer();\n      }\n\n      // Show contradiction after a delay\n      console.log(\"Setting timeout to show contradiction\");\n      setTimeout(async () => {\n        try {\n          console.log(\"Timeout fired, getting contradiction data\");\n          // Get contradiction data\n          const data = await getContradictionSentence(gameSession);\n          console.log(\"Contradiction data received:\", data);\n          setContradictionData(data);\n\n          // Get educational message\n          console.log(\"Dispatching fetchEducationalMessage\");\n          dispatch(fetchEducationalMessage({\n            word: currentRound.word,\n            selectedMeaning: currentRound.options[optionIndex],\n            contradictionMeaning: currentRound.correctMeaning\n          }));\n\n          // Show contradiction\n          console.log(\"Setting showContradiction to true\");\n          setShowContradiction(true);\n          playContradictionReveal();\n        } catch (error) {\n          console.error('Error showing contradiction:', error);\n        }\n      }, 1000);\n    } else {\n      console.log(\"Conditions NOT met for option selection:\", {\n        currentRoundExists: !!currentRound,\n        roundNotCompleted: currentRound ? !currentRound.completed : false,\n        selectedOptionIsNull: selectedOption === null\n      });\n    }\n  }, [currentRound, selectedOption, gameSession, timeRemaining, timerInterval, dispatch]);\n\n  // Handle next word button\n  const handleNextWord = useCallback(() => {\n    console.log(\"handleNextWord called\");\n\n    // Reset state\n    setSelectedOption(null);\n    setShowContradiction(false);\n    setContradictionData(null);\n\n    // Play sound\n    playRoundComplete();\n\n    // Check if this was the last round\n    if (gameSession.currentRound >= gameSession.totalRounds) {\n      console.log(\"Last round completed, navigating to results\");\n      // Complete game\n      dispatch(completeGame());\n      navigate('/results');\n    } else {\n      console.log(\"Starting next round\");\n      // Start next round\n      dispatch(startNextRound());\n    }\n  }, [gameSession, dispatch, navigate]);\n\n  // Handle pause/exit\n  const handlePause = () => {\n    // Implement pause functionality if needed\n    // For now, just navigate back to setup\n    if (timerInterval) {\n      clearInterval(timerInterval);\n    }\n    navigate('/setup');\n  };\n\n  // If no game session or current round, show loading\n  if (!gameSession || !currentRound) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Loading...\",\n        showBackButton: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Content, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            marginTop: '2rem'\n          },\n          role: \"status\",\n          \"aria-live\": \"polite\",\n          children: \"Loading game...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: `Round ${currentRound.roundNumber}/${gameSession.totalRounds}`,\n      showBackButton: true,\n      onBackClick: handlePause\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        current: currentRound.roundNumber,\n        total: gameSession.totalRounds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n        children: [\"Score: \", gameSession.score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        role: \"region\",\n        \"aria-live\": \"polite\",\n        children: !showContradiction ?\n        /*#__PURE__*/\n        // Word presentation phase\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(WordDisplay, {\n            word: currentRound.word.text,\n            instruction: \"Select the meaning of this word:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), gameSession.settings.timeLimit > 0 && /*#__PURE__*/_jsxDEV(TimerDisplay, {\n            timeRemaining: timeRemaining,\n            timeLimit: gameSession.settings.timeLimit,\n            onTimeExpired: () => {\n              if (selectedOption === null && !currentRound.completed) {\n                const randomIndex = Math.floor(Math.random() * currentRound.options.length);\n                handleOptionSelect(randomIndex);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(OptionsContainer, {\n            role: \"radiogroup\",\n            \"aria-label\": \"Word meaning options\",\n            children: currentRound.options.map((option, index) => /*#__PURE__*/_jsxDEV(OptionButton, {\n              text: option.text,\n              index: index,\n              selected: selectedOption === index,\n              disabled: selectedOption !== null,\n              onClick: () => handleOptionSelect(index),\n              \"aria-checked\": selectedOption === index,\n              role: \"radio\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) :\n        /*#__PURE__*/\n        // Contradiction phase\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(WordDisplay, {\n            word: currentRound.word.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ContradictionDisplay, {\n            contradictionData: contradictionData,\n            selectedMeaning: currentRound.options[selectedOption].text,\n            educationalMessage: educationalMessage === null || educationalMessage === void 0 ? void 0 : educationalMessage.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: \"Next Word\",\n              onClick: () => {\n                console.log(\"Next Word button clicked\");\n                handleNextWord();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n};\n_s(GameplayScreen, \"7Uc9wYLKA4pojRdRO4xXVWu39fQ=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector, useSelector];\n});\n_c6 = GameplayScreen;\nexport default GameplayScreen;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"ScoreDisplay\");\n$RefreshReg$(_c4, \"OptionsContainer\");\n$RefreshReg$(_c5, \"ButtonContainer\");\n$RefreshReg$(_c6, \"GameplayScreen\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useDispatch","useSelector","useNavigate","styled","Header","ProgressBar","Button","WordDisplay","OptionButton","TimerDisplay","ContradictionDisplay","selectGameSession","selectCurrentRound","startNextRound","processUserSelection","completeGame","restoreSession","fetchEducationalMessage","selectCurrentMessage","_playOptionSelect","playCorrectAnswer","playIncorrectAnswer","playContradictionReveal","playRoundComplete","getContradictionSentence","saveCurrentGame","recoverGameSession","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Content","_c2","ScoreDisplay","_c3","OptionsContainer","_c4","ButtonContainer","_c5","GameplayScreen","_s","_gameSession$settings2","navigate","dispatch","gameSession","currentRound","educationalMessage","selectedOption","setSelectedOption","timeRemaining","setTimeRemaining","showContradiction","setShowContradiction","contradictionData","setContradictionData","timerInterval","setTimerInterval","console","log","isMounted","recoveredSession","completed","current","saveInterval","setInterval","clearInterval","_gameSession$settings","settings","timeLimit","interval","prev","randomIndex","Math","floor","random","options","length","handleOptionSelect","optionIndex","roundNumber","timeSpent","selectedOptionData","isCorrect","setTimeout","data","word","selectedMeaning","contradictionMeaning","correctMeaning","error","currentRoundExists","roundNotCompleted","selectedOptionIsNull","handleNextWord","totalRounds","handlePause","children","title","showBackButton","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","marginTop","role","onBackClick","total","score","text","instruction","onTimeExpired","map","option","index","selected","disabled","onClick","_c6","$RefreshReg$"],"sources":["C:/Users/abhay/Downloads/WordsEmptyMeaning/src/screens/GameplayScreen.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport Header from '../components/common/Header';\r\nimport ProgressBar from '../components/common/ProgressBar';\r\nimport Button from '../components/common/Button';\r\nimport WordDisplay from '../components/game/WordDisplay';\r\nimport OptionButton from '../components/game/OptionButton';\r\nimport TimerDisplay from '../components/game/TimerDisplay';\r\nimport ContradictionDisplay from '../components/game/ContradictionDisplay';\r\nimport {\r\n  selectGameSession,\r\n  selectCurrentRound,\r\n  startNextRound,\r\n  processUserSelection,\r\n  completeGame,\r\n  restoreSession\r\n} from '../store/slices/gameSlice';\r\nimport { fetchEducationalMessage } from '../store/slices/educationalSlice';\r\nimport { selectCurrentMessage } from '../store/slices/educationalSlice';\r\nimport {\r\n  _playOptionSelect,\r\n  playCorrectAnswer,\r\n  playIncorrectAnswer,\r\n  playContradictionReveal,\r\n  playRoundComplete\r\n} from '../services/soundService';\r\nimport { getContradictionSentence } from '../services/gameService';\r\nimport { saveCurrentGame, recoverGameSession } from '../services/storageService';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n  background-color: var(--color-background);\r\n`;\r\n\r\nconst Content = styled.div`\r\n  flex: 1;\r\n  padding: var(--spacing-md);\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\nconst ScoreDisplay = styled.div`\r\n  text-align: center;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  margin-bottom: var(--spacing-md);\r\n  color: var(--color-primary);\r\n`;\r\n\r\nconst OptionsContainer = styled.div`\r\n  margin-bottom: var(--spacing-lg);\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: var(--spacing-lg);\r\n`;\r\n\r\n/**\r\n * GameplayScreen component for the main gameplay experience\r\n * @returns {JSX.Element} - Rendered component\r\n */\r\nconst GameplayScreen = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const gameSession = useSelector(selectGameSession);\r\n  const currentRound = useSelector(selectCurrentRound);\r\n  const educationalMessage = useSelector(selectCurrentMessage);\r\n  \r\n  // Local state\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [timeRemaining, setTimeRemaining] = useState(0);\r\n  const [showContradiction, setShowContradiction] = useState(false);\r\n  const [contradictionData, setContradictionData] = useState(null);\r\n  const [timerInterval, setTimerInterval] = useState(null);\r\n  \r\n  // Debug logging\r\n  console.log(\"GameplayScreen render - selectedOption:\", selectedOption);\r\n  console.log(\"GameplayScreen render - showContradiction:\", showContradiction);\r\n  \r\n  // Reference to track if component is mounted\r\n  const isMounted = useRef(true);\r\n  \r\n  // Check if game session exists and handle recovery\r\n  useEffect(() => {\r\n    if (!gameSession) {\r\n      // Try to recover game session\r\n      const recoveredSession = recoverGameSession();\r\n      if (recoveredSession) {\r\n        // If we recovered a session, dispatch an action to restore it\r\n        dispatch(restoreSession(recoveredSession));\r\n      } else {\r\n        navigate('/setup');\r\n      }\r\n    } else if (gameSession.completed) {\r\n      navigate('/results');\r\n    } else if (gameSession.currentRound === 0) {\r\n      // Start first round\r\n      dispatch(startNextRound());\r\n    }\r\n    \r\n    // Save game session on unmount\r\n    return () => {\r\n      isMounted.current = false;\r\n      if (gameSession && !gameSession.completed) {\r\n        saveCurrentGame(gameSession);\r\n      }\r\n    };\r\n  }, [gameSession, navigate, dispatch]);\r\n  \r\n  // Ensure local state is synchronized with Redux state\r\n  useEffect(() => {\r\n    if (currentRound) {\r\n      // Reset selectedOption when the round changes or if it's a new round\r\n      if (!currentRound.completed) {\r\n        setSelectedOption(null);\r\n        setShowContradiction(false);\r\n        setContradictionData(null);\r\n      }\r\n    }\r\n  }, [currentRound]);\r\n  \r\n  // Periodically save game state during gameplay\r\n  useEffect(() => {\r\n    if (!gameSession) return;\r\n    \r\n    const saveInterval = setInterval(() => {\r\n      if (gameSession && !gameSession.completed) {\r\n        saveCurrentGame(gameSession);\r\n      }\r\n    }, 10000); // Save every 10 seconds\r\n    \r\n    return () => clearInterval(saveInterval);\r\n  }, [gameSession]);\r\n  \r\n  // Set up timer when round changes\r\n  useEffect(() => {\r\n    if (currentRound && !currentRound.completed && gameSession?.settings?.timeLimit > 0) {\r\n      setTimeRemaining(gameSession.settings.timeLimit);\r\n      \r\n      // Clear any existing timer\r\n      if (timerInterval) {\r\n        clearInterval(timerInterval);\r\n      }\r\n      \r\n      // Start new timer\r\n      const interval = setInterval(() => {\r\n        setTimeRemaining(prev => {\r\n          if (prev <= 0) {\r\n            clearInterval(interval);\r\n            return 0;\r\n          }\r\n          return prev - 0.1;\r\n        });\r\n      }, 100);\r\n      \r\n      setTimerInterval(interval);\r\n      \r\n      return () => {\r\n        clearInterval(interval);\r\n      };\r\n    }\r\n  }, [currentRound, gameSession?.settings?.timeLimit]);\r\n  \r\n  // Handle timer expiration\r\n  useEffect(() => {\r\n    if (timeRemaining <= 0 && currentRound && !currentRound.completed && !selectedOption) {\r\n      // Time expired, select a random option\r\n      const randomIndex = Math.floor(Math.random() * currentRound.options.length);\r\n      handleOptionSelect(randomIndex);\r\n    }\r\n  }, [timeRemaining, currentRound, selectedOption]);\r\n  \r\n  // Clean up timer on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timerInterval) {\r\n        clearInterval(timerInterval);\r\n      }\r\n    };\r\n  }, [timerInterval]);\r\n  \r\n  // Handle option selection\r\n  const handleOptionSelect = useCallback((optionIndex) => {\r\n    console.log(\"handleOptionSelect called with optionIndex:\", optionIndex);\r\n    console.log(\"Current state:\", {\r\n      currentRound: currentRound ? {\r\n        roundNumber: currentRound.roundNumber,\r\n        completed: currentRound.completed\r\n      } : null,\r\n      selectedOption,\r\n      timeRemaining\r\n    });\r\n    \r\n    if (currentRound && !currentRound.completed && selectedOption === null) {\r\n      console.log(\"Conditions met for option selection\");\r\n      \r\n      // Stop timer\r\n      if (timerInterval) {\r\n        clearInterval(timerInterval);\r\n        console.log(\"Timer stopped\");\r\n      }\r\n      \r\n      // Set selected option\r\n      setSelectedOption(optionIndex);\r\n      console.log(\"Selected option set to:\", optionIndex);\r\n      \r\n      // Process selection\r\n      const timeSpent = gameSession.settings.timeLimit > 0\r\n        ? gameSession.settings.timeLimit - timeRemaining\r\n        : 0;\r\n      \r\n      console.log(\"Dispatching processUserSelection with:\", { optionIndex, timeSpent });\r\n      dispatch(processUserSelection({ optionIndex, timeSpent }));\r\n      \r\n      // Play sound based on correctness\r\n      const selectedOptionData = currentRound.options[optionIndex];\r\n      if (selectedOptionData.isCorrect) {\r\n        console.log(\"Correct answer selected\");\r\n        playCorrectAnswer();\r\n      } else {\r\n        console.log(\"Incorrect answer selected\");\r\n        playIncorrectAnswer();\r\n      }\r\n      \r\n      // Show contradiction after a delay\r\n      console.log(\"Setting timeout to show contradiction\");\r\n      setTimeout(async () => {\r\n        try {\r\n          console.log(\"Timeout fired, getting contradiction data\");\r\n          // Get contradiction data\r\n          const data = await getContradictionSentence(gameSession);\r\n          console.log(\"Contradiction data received:\", data);\r\n          setContradictionData(data);\r\n          \r\n          // Get educational message\r\n          console.log(\"Dispatching fetchEducationalMessage\");\r\n          dispatch(fetchEducationalMessage({\r\n            word: currentRound.word,\r\n            selectedMeaning: currentRound.options[optionIndex],\r\n            contradictionMeaning: currentRound.correctMeaning\r\n          }));\r\n          \r\n          // Show contradiction\r\n          console.log(\"Setting showContradiction to true\");\r\n          setShowContradiction(true);\r\n          playContradictionReveal();\r\n        } catch (error) {\r\n          console.error('Error showing contradiction:', error);\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      console.log(\"Conditions NOT met for option selection:\", {\r\n        currentRoundExists: !!currentRound,\r\n        roundNotCompleted: currentRound ? !currentRound.completed : false,\r\n        selectedOptionIsNull: selectedOption === null\r\n      });\r\n    }\r\n  }, [currentRound, selectedOption, gameSession, timeRemaining, timerInterval, dispatch]);\r\n  \r\n  // Handle next word button\r\n  const handleNextWord = useCallback(() => {\r\n    console.log(\"handleNextWord called\");\r\n    \r\n    // Reset state\r\n    setSelectedOption(null);\r\n    setShowContradiction(false);\r\n    setContradictionData(null);\r\n    \r\n    // Play sound\r\n    playRoundComplete();\r\n    \r\n    // Check if this was the last round\r\n    if (gameSession.currentRound >= gameSession.totalRounds) {\r\n      console.log(\"Last round completed, navigating to results\");\r\n      // Complete game\r\n      dispatch(completeGame());\r\n      navigate('/results');\r\n    } else {\r\n      console.log(\"Starting next round\");\r\n      // Start next round\r\n      dispatch(startNextRound());\r\n    }\r\n  }, [gameSession, dispatch, navigate]);\r\n  \r\n  // Handle pause/exit\r\n  const handlePause = () => {\r\n    // Implement pause functionality if needed\r\n    // For now, just navigate back to setup\r\n    if (timerInterval) {\r\n      clearInterval(timerInterval);\r\n    }\r\n    navigate('/setup');\r\n  };\r\n  \r\n  // If no game session or current round, show loading\r\n  if (!gameSession || !currentRound) {\r\n    return (\r\n      <Container>\r\n        <Header title=\"Loading...\" showBackButton />\r\n        <Content>\r\n          <div\r\n            style={{ textAlign: 'center', marginTop: '2rem' }}\r\n            role=\"status\"\r\n            aria-live=\"polite\"\r\n          >\r\n            Loading game...\r\n          </div>\r\n        </Content>\r\n      </Container>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Container>\r\n      <Header \r\n        title={`Round ${currentRound.roundNumber}/${gameSession.totalRounds}`} \r\n        showBackButton \r\n        onBackClick={handlePause}\r\n      />\r\n      \r\n      <Content>\r\n        <ProgressBar \r\n          current={currentRound.roundNumber} \r\n          total={gameSession.totalRounds} \r\n        />\r\n        \r\n        <ScoreDisplay>\r\n          Score: {gameSession.score}\r\n        </ScoreDisplay>\r\n        \r\n        <div role=\"region\" aria-live=\"polite\">\r\n          {!showContradiction ? (\r\n            // Word presentation phase\r\n            <>\r\n              <WordDisplay\r\n                word={currentRound.word.text}\r\n                instruction=\"Select the meaning of this word:\"\r\n              />\r\n              \r\n              {gameSession.settings.timeLimit > 0 && (\r\n                <TimerDisplay\r\n                  timeRemaining={timeRemaining}\r\n                  timeLimit={gameSession.settings.timeLimit}\r\n                  onTimeExpired={() => {\r\n                    if (selectedOption === null && !currentRound.completed) {\r\n                      const randomIndex = Math.floor(Math.random() * currentRound.options.length);\r\n                      handleOptionSelect(randomIndex);\r\n                    }\r\n                  }}\r\n                />\r\n              )}\r\n              \r\n              <OptionsContainer role=\"radiogroup\" aria-label=\"Word meaning options\">\r\n                {currentRound.options.map((option, index) => (\r\n                  <OptionButton\r\n                    key={index}\r\n                    text={option.text}\r\n                    index={index}\r\n                    selected={selectedOption === index}\r\n                    disabled={selectedOption !== null}\r\n                    onClick={() => handleOptionSelect(index)}\r\n                    aria-checked={selectedOption === index}\r\n                    role=\"radio\"\r\n                  />\r\n                ))}\r\n              </OptionsContainer>\r\n            </>\r\n          ) : (\r\n            // Contradiction phase\r\n            <>\r\n              <WordDisplay word={currentRound.word.text} />\r\n              \r\n              <ContradictionDisplay\r\n                contradictionData={contradictionData}\r\n                selectedMeaning={currentRound.options[selectedOption].text}\r\n                educationalMessage={educationalMessage?.text}\r\n              />\r\n              \r\n              <ButtonContainer>\r\n                <Button\r\n                  text=\"Next Word\"\r\n                  onClick={() => {\r\n                    console.log(\"Next Word button clicked\");\r\n                    handleNextWord();\r\n                  }}\r\n                />\r\n              </ButtonContainer>\r\n            </>\r\n          )}\r\n        </div>\r\n      </Content>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GameplayScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}