{"ast":null,"code":"/**\r\n * Storage service for handling local storage operations\r\n */\nimport { manageStorage, optimizeStorage } from './storageManagementService';\n\n// Keys for local storage\nconst STORAGE_KEYS = {\n  USER_SETTINGS: 'words_without_meaning_user_settings',\n  CURRENT_GAME: 'words_without_meaning_current_game',\n  COMPLETED_GAMES: 'words_without_meaning_completed_games',\n  USER_PROGRESS: 'words_without_meaning_user_progress',\n  HAS_SEEN_TUTORIAL: 'words_without_meaning_has_seen_tutorial'\n};\n\n// Run storage management on service initialization\nmanageStorage();\n\n/**\r\n * Gets user settings from local storage\r\n * @returns {Object} - The user settings or default settings if none found\r\n */\nexport const getUserSettings = () => {\n  try {\n    const storedSettings = localStorage.getItem(STORAGE_KEYS.USER_SETTINGS);\n    if (storedSettings) {\n      return JSON.parse(storedSettings);\n    }\n\n    // Default settings\n    const defaultSettings = {\n      defaultDifficulty: 'medium',\n      defaultRoundCount: 10,\n      defaultTimeLimit: 30,\n      soundEnabled: true,\n      theme: 'default',\n      accessibility: {\n        highContrast: false,\n        largeText: false,\n        reducedMotion: false,\n        screenReaderOptimized: false\n      }\n    };\n\n    // Save default settings\n    localStorage.setItem(STORAGE_KEYS.USER_SETTINGS, JSON.stringify(defaultSettings));\n    return defaultSettings;\n  } catch (error) {\n    console.error('Error getting user settings:', error);\n\n    // Return default settings on error\n    return {\n      defaultDifficulty: 'medium',\n      defaultRoundCount: 10,\n      defaultTimeLimit: 30,\n      soundEnabled: true,\n      theme: 'default',\n      accessibility: {\n        highContrast: false,\n        largeText: false,\n        reducedMotion: false,\n        screenReaderOptimized: false\n      }\n    };\n  }\n};\n\n/**\r\n * Updates user settings in local storage\r\n * @param {Object} newSettings - The new settings to save\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\nexport const updateUserSettings = newSettings => {\n  try {\n    const currentSettings = getUserSettings();\n    const updatedSettings = {\n      ...currentSettings,\n      ...newSettings\n    };\n    localStorage.setItem(STORAGE_KEYS.USER_SETTINGS, JSON.stringify(updatedSettings));\n    return true;\n  } catch (error) {\n    console.error('Error updating user settings:', error);\n    return false;\n  }\n};\n\n/**\r\n * Gets the current game session from local storage\r\n * @returns {Object|null} - The current game session or null if none found\r\n */\nexport const getCurrentGame = () => {\n  try {\n    const storedGame = localStorage.getItem(STORAGE_KEYS.CURRENT_GAME);\n    if (storedGame) {\n      const gameSession = JSON.parse(storedGame);\n\n      // Convert date strings back to Date objects\n      if (gameSession.startTime) {\n        gameSession.startTime = new Date(gameSession.startTime);\n      }\n      if (gameSession.endTime) {\n        gameSession.endTime = new Date(gameSession.endTime);\n      }\n\n      // Validate game session integrity\n      if (!isValidGameSession(gameSession)) {\n        console.warn('Invalid game session detected, clearing session');\n        clearCurrentGame();\n        return null;\n      }\n      return gameSession;\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting current game:', error);\n    // Clear corrupted game data\n    clearCurrentGame();\n    return null;\n  }\n};\n\n/**\r\n * Validates a game session object to ensure it has all required properties\r\n * @param {Object} gameSession - The game session to validate\r\n * @returns {boolean} - Whether the game session is valid\r\n */\nconst isValidGameSession = gameSession => {\n  // Check for required properties\n  if (!gameSession || typeof gameSession !== 'object' || !gameSession.id || !gameSession.settings || typeof gameSession.currentRound !== 'number' || typeof gameSession.totalRounds !== 'number' || !Array.isArray(gameSession.rounds)) {\n    return false;\n  }\n\n  // Check if rounds array matches the expected length\n  if (gameSession.rounds.length !== gameSession.totalRounds) {\n    return false;\n  }\n\n  // Check if current round is valid\n  if (gameSession.currentRound < 0 || gameSession.currentRound > gameSession.totalRounds) {\n    return false;\n  }\n  return true;\n};\n\n/**\r\n * Saves the current game session to local storage\r\n * @param {Object} gameSession - The game session to save\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\nexport const saveCurrentGame = gameSession => {\n  try {\n    if (!gameSession) {\n      return false;\n    }\n\n    // Create a timestamp for the save\n    const saveData = {\n      ...gameSession,\n      lastSaved: new Date()\n    };\n\n    // Save to localStorage\n    localStorage.setItem(STORAGE_KEYS.CURRENT_GAME, JSON.stringify(saveData));\n\n    // Create a backup copy for recovery\n    localStorage.setItem(`${STORAGE_KEYS.CURRENT_GAME}_backup`, JSON.stringify(saveData));\n    return true;\n  } catch (error) {\n    console.error('Error saving current game:', error);\n    return false;\n  }\n};\n\n/**\r\n * Clears the current game session from local storage\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\nexport const clearCurrentGame = () => {\n  try {\n    localStorage.removeItem(STORAGE_KEYS.CURRENT_GAME);\n    localStorage.removeItem(`${STORAGE_KEYS.CURRENT_GAME}_backup`);\n    return true;\n  } catch (error) {\n    console.error('Error clearing current game:', error);\n    return false;\n  }\n};\n\n/**\r\n * Attempts to recover a game session if the primary save is corrupted\r\n * @returns {Object|null} - The recovered game session or null if recovery failed\r\n */\nexport const recoverGameSession = () => {\n  try {\n    // Try to get the backup\n    const backupGame = localStorage.getItem(`${STORAGE_KEYS.CURRENT_GAME}_backup`);\n    if (backupGame) {\n      const gameSession = JSON.parse(backupGame);\n\n      // Convert date strings back to Date objects\n      if (gameSession.startTime) {\n        gameSession.startTime = new Date(gameSession.startTime);\n      }\n      if (gameSession.endTime) {\n        gameSession.endTime = new Date(gameSession.endTime);\n      }\n\n      // Validate the backup\n      if (isValidGameSession(gameSession)) {\n        // Restore the backup to the primary save\n        localStorage.setItem(STORAGE_KEYS.CURRENT_GAME, backupGame);\n        return gameSession;\n      }\n    }\n    return null;\n  } catch (error) {\n    console.error('Error recovering game session:', error);\n    return null;\n  }\n};\n\n/**\r\n * Gets completed games from local storage\r\n * @returns {Array} - Array of completed game sessions\r\n */\nexport const getCompletedGames = () => {\n  try {\n    const storedGames = localStorage.getItem(STORAGE_KEYS.COMPLETED_GAMES);\n    if (storedGames) {\n      const games = JSON.parse(storedGames);\n\n      // Convert date strings back to Date objects\n      games.forEach(game => {\n        if (game.startTime) {\n          game.startTime = new Date(game.startTime);\n        }\n        if (game.endTime) {\n          game.endTime = new Date(game.endTime);\n        }\n      });\n      return games;\n    }\n    return [];\n  } catch (error) {\n    console.error('Error getting completed games:', error);\n    return [];\n  }\n};\n\n/**\r\n * Saves a completed game to local storage\r\n * @param {Object} gameSession - The completed game session to save\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\nexport const saveCompletedGame = gameSession => {\n  try {\n    if (!gameSession || !gameSession.completed) {\n      return false;\n    }\n\n    // Run storage optimization before saving\n    optimizeStorage();\n    const completedGames = getCompletedGames();\n\n    // Check if game already exists in completed games\n    const existingIndex = completedGames.findIndex(game => game.id === gameSession.id);\n    if (existingIndex >= 0) {\n      // Update existing game\n      completedGames[existingIndex] = gameSession;\n    } else {\n      // Add new game\n      completedGames.push(gameSession);\n    }\n\n    // Limit to last 20 games\n    const limitedGames = completedGames.slice(-20);\n    localStorage.setItem(STORAGE_KEYS.COMPLETED_GAMES, JSON.stringify(limitedGames));\n    return true;\n  } catch (error) {\n    console.error('Error saving completed game:', error);\n    return false;\n  }\n};\n\n/**\r\n * Gets user progress from local storage\r\n * @returns {Object} - The user progress or default progress if none found\r\n */\nexport const getUserProgress = () => {\n  try {\n    const storedProgress = localStorage.getItem(STORAGE_KEYS.USER_PROGRESS);\n    if (storedProgress) {\n      const progress = JSON.parse(storedProgress);\n\n      // Convert date strings back to Date objects\n      if (progress.lastPlayed) {\n        progress.lastPlayed = new Date(progress.lastPlayed);\n      }\n      return progress;\n    }\n\n    // Default progress\n    const defaultProgress = {\n      gamesPlayed: 0,\n      totalScore: 0,\n      averageScore: 0,\n      wordsEncountered: [],\n      conceptsLearned: [],\n      difficultyProgression: {\n        easy: 0,\n        medium: 0,\n        hard: 0\n      },\n      lastPlayed: null\n    };\n\n    // Save default progress\n    localStorage.setItem(STORAGE_KEYS.USER_PROGRESS, JSON.stringify(defaultProgress));\n    return defaultProgress;\n  } catch (error) {\n    console.error('Error getting user progress:', error);\n\n    // Return default progress on error\n    return {\n      gamesPlayed: 0,\n      totalScore: 0,\n      averageScore: 0,\n      wordsEncountered: [],\n      conceptsLearned: [],\n      difficultyProgression: {\n        easy: 0,\n        medium: 0,\n        hard: 0\n      },\n      lastPlayed: null\n    };\n  }\n};\n\n/**\r\n * Updates user progress in local storage\r\n * @param {Object} newProgress - The new progress to save\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\nexport const updateUserProgress = newProgress => {\n  try {\n    const currentProgress = getUserProgress();\n    const updatedProgress = {\n      ...currentProgress,\n      ...newProgress\n    };\n    localStorage.setItem(STORAGE_KEYS.USER_PROGRESS, JSON.stringify(updatedProgress));\n    return true;\n  } catch (error) {\n    console.error('Error updating user progress:', error);\n    return false;\n  }\n};\n\n/**\r\n * Checks if the user has seen the tutorial\r\n * @returns {boolean} - True if the user has seen the tutorial, false otherwise\r\n */\nexport const hasSeenTutorial = () => {\n  try {\n    const value = localStorage.getItem(STORAGE_KEYS.HAS_SEEN_TUTORIAL);\n    return value === 'true';\n  } catch (error) {\n    console.error('Error checking if user has seen tutorial:', error);\n    return false;\n  }\n};\n\n/**\r\n * Marks the tutorial as seen\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\nexport const markTutorialSeen = () => {\n  try {\n    localStorage.setItem(STORAGE_KEYS.HAS_SEEN_TUTORIAL, 'true');\n    return true;\n  } catch (error) {\n    console.error('Error marking tutorial as seen:', error);\n    return false;\n  }\n};\n\n/**\r\n * Clears all data from local storage\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\nexport const clearAllData = () => {\n  try {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      localStorage.removeItem(key);\n      // Also remove any backup files\n      localStorage.removeItem(`${key}_backup`);\n    });\n    return true;\n  } catch (error) {\n    console.error('Error clearing all data:', error);\n    return false;\n  }\n};\n\n/**\r\n * Initializes the storage service\r\n * This should be called when the application starts\r\n */\nexport const initializeStorageService = () => {\n  try {\n    // Run storage management\n    manageStorage();\n\n    // Log storage status\n\n    return true;\n  } catch (error) {\n    console.error('Error initializing storage service:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["manageStorage","optimizeStorage","STORAGE_KEYS","USER_SETTINGS","CURRENT_GAME","COMPLETED_GAMES","USER_PROGRESS","HAS_SEEN_TUTORIAL","getUserSettings","storedSettings","localStorage","getItem","JSON","parse","defaultSettings","defaultDifficulty","defaultRoundCount","defaultTimeLimit","soundEnabled","theme","accessibility","highContrast","largeText","reducedMotion","screenReaderOptimized","setItem","stringify","error","console","updateUserSettings","newSettings","currentSettings","updatedSettings","getCurrentGame","storedGame","gameSession","startTime","Date","endTime","isValidGameSession","warn","clearCurrentGame","id","settings","currentRound","totalRounds","Array","isArray","rounds","length","saveCurrentGame","saveData","lastSaved","removeItem","recoverGameSession","backupGame","getCompletedGames","storedGames","games","forEach","game","saveCompletedGame","completed","completedGames","existingIndex","findIndex","push","limitedGames","slice","getUserProgress","storedProgress","progress","lastPlayed","defaultProgress","gamesPlayed","totalScore","averageScore","wordsEncountered","conceptsLearned","difficultyProgression","easy","medium","hard","updateUserProgress","newProgress","currentProgress","updatedProgress","hasSeenTutorial","value","markTutorialSeen","clearAllData","Object","values","key","initializeStorageService"],"sources":["C:/Users/abhay/Downloads/WordHaveNoMeaning/src/services/storageService.js"],"sourcesContent":["/**\r\n * Storage service for handling local storage operations\r\n */\r\nimport { manageStorage, optimizeStorage } from './storageManagementService';\r\n\r\n// Keys for local storage\r\nconst STORAGE_KEYS = {\r\n  USER_SETTINGS: 'words_without_meaning_user_settings',\r\n  CURRENT_GAME: 'words_without_meaning_current_game',\r\n  COMPLETED_GAMES: 'words_without_meaning_completed_games',\r\n  USER_PROGRESS: 'words_without_meaning_user_progress',\r\n  HAS_SEEN_TUTORIAL: 'words_without_meaning_has_seen_tutorial',\r\n};\r\n\r\n// Run storage management on service initialization\r\nmanageStorage();\r\n\r\n/**\r\n * Gets user settings from local storage\r\n * @returns {Object} - The user settings or default settings if none found\r\n */\r\nexport const getUserSettings = () => {\r\n  try {\r\n    const storedSettings = localStorage.getItem(STORAGE_KEYS.USER_SETTINGS);\r\n    \r\n    if (storedSettings) {\r\n      return JSON.parse(storedSettings);\r\n    }\r\n    \r\n    // Default settings\r\n    const defaultSettings = {\r\n      defaultDifficulty: 'medium',\r\n      defaultRoundCount: 10,\r\n      defaultTimeLimit: 30,\r\n      soundEnabled: true,\r\n      theme: 'default',\r\n      accessibility: {\r\n        highContrast: false,\r\n        largeText: false,\r\n        reducedMotion: false,\r\n        screenReaderOptimized: false,\r\n      },\r\n    };\r\n    \r\n    // Save default settings\r\n    localStorage.setItem(STORAGE_KEYS.USER_SETTINGS, JSON.stringify(defaultSettings));\r\n    \r\n    return defaultSettings;\r\n  } catch (error) {\r\n    console.error('Error getting user settings:', error);\r\n    \r\n    // Return default settings on error\r\n    return {\r\n      defaultDifficulty: 'medium',\r\n      defaultRoundCount: 10,\r\n      defaultTimeLimit: 30,\r\n      soundEnabled: true,\r\n      theme: 'default',\r\n      accessibility: {\r\n        highContrast: false,\r\n        largeText: false,\r\n        reducedMotion: false,\r\n        screenReaderOptimized: false,\r\n      },\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Updates user settings in local storage\r\n * @param {Object} newSettings - The new settings to save\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\r\nexport const updateUserSettings = (newSettings) => {\r\n  try {\r\n    const currentSettings = getUserSettings();\r\n    const updatedSettings = { ...currentSettings, ...newSettings };\r\n    \r\n    localStorage.setItem(STORAGE_KEYS.USER_SETTINGS, JSON.stringify(updatedSettings));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating user settings:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the current game session from local storage\r\n * @returns {Object|null} - The current game session or null if none found\r\n */\r\nexport const getCurrentGame = () => {\r\n  try {\r\n    const storedGame = localStorage.getItem(STORAGE_KEYS.CURRENT_GAME);\r\n    \r\n    if (storedGame) {\r\n      const gameSession = JSON.parse(storedGame);\r\n      \r\n      // Convert date strings back to Date objects\r\n      if (gameSession.startTime) {\r\n        gameSession.startTime = new Date(gameSession.startTime);\r\n      }\r\n      \r\n      if (gameSession.endTime) {\r\n        gameSession.endTime = new Date(gameSession.endTime);\r\n      }\r\n      \r\n      // Validate game session integrity\r\n      if (!isValidGameSession(gameSession)) {\r\n        console.warn('Invalid game session detected, clearing session');\r\n        clearCurrentGame();\r\n        return null;\r\n      }\r\n      \r\n      return gameSession;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting current game:', error);\r\n    // Clear corrupted game data\r\n    clearCurrentGame();\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Validates a game session object to ensure it has all required properties\r\n * @param {Object} gameSession - The game session to validate\r\n * @returns {boolean} - Whether the game session is valid\r\n */\r\nconst isValidGameSession = (gameSession) => {\r\n  // Check for required properties\r\n  if (!gameSession ||\r\n      typeof gameSession !== 'object' ||\r\n      !gameSession.id ||\r\n      !gameSession.settings ||\r\n      typeof gameSession.currentRound !== 'number' ||\r\n      typeof gameSession.totalRounds !== 'number' ||\r\n      !Array.isArray(gameSession.rounds)) {\r\n    return false;\r\n  }\r\n  \r\n  // Check if rounds array matches the expected length\r\n  if (gameSession.rounds.length !== gameSession.totalRounds) {\r\n    return false;\r\n  }\r\n  \r\n  // Check if current round is valid\r\n  if (gameSession.currentRound < 0 || gameSession.currentRound > gameSession.totalRounds) {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n\r\n/**\r\n * Saves the current game session to local storage\r\n * @param {Object} gameSession - The game session to save\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\r\nexport const saveCurrentGame = (gameSession) => {\r\n  try {\r\n    if (!gameSession) {\r\n      return false;\r\n    }\r\n    \r\n    // Create a timestamp for the save\r\n    const saveData = {\r\n      ...gameSession,\r\n      lastSaved: new Date()\r\n    };\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem(STORAGE_KEYS.CURRENT_GAME, JSON.stringify(saveData));\r\n    \r\n    // Create a backup copy for recovery\r\n    localStorage.setItem(`${STORAGE_KEYS.CURRENT_GAME}_backup`, JSON.stringify(saveData));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving current game:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Clears the current game session from local storage\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\r\nexport const clearCurrentGame = () => {\r\n  try {\r\n    localStorage.removeItem(STORAGE_KEYS.CURRENT_GAME);\r\n    localStorage.removeItem(`${STORAGE_KEYS.CURRENT_GAME}_backup`);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing current game:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Attempts to recover a game session if the primary save is corrupted\r\n * @returns {Object|null} - The recovered game session or null if recovery failed\r\n */\r\nexport const recoverGameSession = () => {\r\n  try {\r\n    // Try to get the backup\r\n    const backupGame = localStorage.getItem(`${STORAGE_KEYS.CURRENT_GAME}_backup`);\r\n    \r\n    if (backupGame) {\r\n      const gameSession = JSON.parse(backupGame);\r\n      \r\n      // Convert date strings back to Date objects\r\n      if (gameSession.startTime) {\r\n        gameSession.startTime = new Date(gameSession.startTime);\r\n      }\r\n      \r\n      if (gameSession.endTime) {\r\n        gameSession.endTime = new Date(gameSession.endTime);\r\n      }\r\n      \r\n      // Validate the backup\r\n      if (isValidGameSession(gameSession)) {\r\n        // Restore the backup to the primary save\r\n        localStorage.setItem(STORAGE_KEYS.CURRENT_GAME, backupGame);\r\n        return gameSession;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error recovering game session:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Gets completed games from local storage\r\n * @returns {Array} - Array of completed game sessions\r\n */\r\nexport const getCompletedGames = () => {\r\n  try {\r\n    const storedGames = localStorage.getItem(STORAGE_KEYS.COMPLETED_GAMES);\r\n    \r\n    if (storedGames) {\r\n      const games = JSON.parse(storedGames);\r\n      \r\n      // Convert date strings back to Date objects\r\n      games.forEach(game => {\r\n        if (game.startTime) {\r\n          game.startTime = new Date(game.startTime);\r\n        }\r\n        \r\n        if (game.endTime) {\r\n          game.endTime = new Date(game.endTime);\r\n        }\r\n      });\r\n      \r\n      return games;\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error getting completed games:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Saves a completed game to local storage\r\n * @param {Object} gameSession - The completed game session to save\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\r\nexport const saveCompletedGame = (gameSession) => {\r\n  try {\r\n    if (!gameSession || !gameSession.completed) {\r\n      return false;\r\n    }\r\n    \r\n    // Run storage optimization before saving\r\n    optimizeStorage();\r\n    \r\n    const completedGames = getCompletedGames();\r\n    \r\n    // Check if game already exists in completed games\r\n    const existingIndex = completedGames.findIndex(game => game.id === gameSession.id);\r\n    \r\n    if (existingIndex >= 0) {\r\n      // Update existing game\r\n      completedGames[existingIndex] = gameSession;\r\n    } else {\r\n      // Add new game\r\n      completedGames.push(gameSession);\r\n    }\r\n    \r\n    // Limit to last 20 games\r\n    const limitedGames = completedGames.slice(-20);\r\n    \r\n    localStorage.setItem(STORAGE_KEYS.COMPLETED_GAMES, JSON.stringify(limitedGames));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving completed game:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Gets user progress from local storage\r\n * @returns {Object} - The user progress or default progress if none found\r\n */\r\nexport const getUserProgress = () => {\r\n  try {\r\n    const storedProgress = localStorage.getItem(STORAGE_KEYS.USER_PROGRESS);\r\n    \r\n    if (storedProgress) {\r\n      const progress = JSON.parse(storedProgress);\r\n      \r\n      // Convert date strings back to Date objects\r\n      if (progress.lastPlayed) {\r\n        progress.lastPlayed = new Date(progress.lastPlayed);\r\n      }\r\n      \r\n      return progress;\r\n    }\r\n    \r\n    // Default progress\r\n    const defaultProgress = {\r\n      gamesPlayed: 0,\r\n      totalScore: 0,\r\n      averageScore: 0,\r\n      wordsEncountered: [],\r\n      conceptsLearned: [],\r\n      difficultyProgression: {\r\n        easy: 0,\r\n        medium: 0,\r\n        hard: 0,\r\n      },\r\n      lastPlayed: null,\r\n    };\r\n    \r\n    // Save default progress\r\n    localStorage.setItem(STORAGE_KEYS.USER_PROGRESS, JSON.stringify(defaultProgress));\r\n    \r\n    return defaultProgress;\r\n  } catch (error) {\r\n    console.error('Error getting user progress:', error);\r\n    \r\n    // Return default progress on error\r\n    return {\r\n      gamesPlayed: 0,\r\n      totalScore: 0,\r\n      averageScore: 0,\r\n      wordsEncountered: [],\r\n      conceptsLearned: [],\r\n      difficultyProgression: {\r\n        easy: 0,\r\n        medium: 0,\r\n        hard: 0,\r\n      },\r\n      lastPlayed: null,\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Updates user progress in local storage\r\n * @param {Object} newProgress - The new progress to save\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\r\nexport const updateUserProgress = (newProgress) => {\r\n  try {\r\n    const currentProgress = getUserProgress();\r\n    const updatedProgress = { ...currentProgress, ...newProgress };\r\n    \r\n    localStorage.setItem(STORAGE_KEYS.USER_PROGRESS, JSON.stringify(updatedProgress));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating user progress:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Checks if the user has seen the tutorial\r\n * @returns {boolean} - True if the user has seen the tutorial, false otherwise\r\n */\r\nexport const hasSeenTutorial = () => {\r\n  try {\r\n    const value = localStorage.getItem(STORAGE_KEYS.HAS_SEEN_TUTORIAL);\r\n    return value === 'true';\r\n  } catch (error) {\r\n    console.error('Error checking if user has seen tutorial:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Marks the tutorial as seen\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\r\nexport const markTutorialSeen = () => {\r\n  try {\r\n    localStorage.setItem(STORAGE_KEYS.HAS_SEEN_TUTORIAL, 'true');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error marking tutorial as seen:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Clears all data from local storage\r\n * @returns {boolean} - True if successful, false otherwise\r\n */\r\nexport const clearAllData = () => {\r\n  try {\r\n    Object.values(STORAGE_KEYS).forEach(key => {\r\n      localStorage.removeItem(key);\r\n      // Also remove any backup files\r\n      localStorage.removeItem(`${key}_backup`);\r\n    });\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing all data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes the storage service\r\n * This should be called when the application starts\r\n */\r\nexport const initializeStorageService = () => {\r\n  try {\r\n    // Run storage management\r\n     manageStorage();\r\n    \r\n    // Log storage status\r\n   \r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error initializing storage service:', error);\r\n    return false;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}