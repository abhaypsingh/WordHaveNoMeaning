{"ast":null,"code":"/**\r\n * Sound service for handling sound effects\r\n */\n\n// Sound effect URLs\nconst SOUND_EFFECTS = {\n  BUTTON_CLICK: '/sounds/button-click.mp3',\n  OPTION_SELECT: '/sounds/option-select.mp3',\n  CORRECT_ANSWER: '/sounds/correct-answer.mp3',\n  INCORRECT_ANSWER: '/sounds/incorrect-answer.mp3',\n  CONTRADICTION_REVEAL: '/sounds/contradiction-reveal.mp3',\n  ROUND_COMPLETE: '/sounds/round-complete.mp3',\n  GAME_COMPLETE: '/sounds/game-complete.mp3',\n  TIMER_TICK: '/sounds/timer-tick.mp3',\n  TIMER_EXPIRE: '/sounds/timer-expire.mp3'\n};\n\n// Audio objects cache\nconst audioCache = {};\n\n// Global sound settings\nlet soundEnabled = true;\nlet volume = 1.0;\n\n/**\r\n * Initializes the sound service\r\n * @param {boolean} enabled - Whether sound is enabled\r\n * @param {number} initialVolume - Initial volume level (0.0 to 1.0)\r\n */\nexport const initSoundService = (enabled = true, initialVolume = 1.0) => {\n  soundEnabled = enabled;\n  volume = Math.max(0, Math.min(1, initialVolume));\n\n  // Preload sound effects\n  if (soundEnabled) {\n    Object.values(SOUND_EFFECTS).forEach(url => {\n      preloadSound(url);\n    });\n  }\n};\n\n/**\r\n * Preloads a sound effect\r\n * @param {string} url - URL of the sound effect\r\n */\nconst preloadSound = url => {\n  if (!audioCache[url]) {\n    try {\n      const audio = new Audio(url);\n      audio.load();\n      audioCache[url] = audio;\n    } catch (error) {\n      console.error(`Error preloading sound: ${url}`, error);\n    }\n  }\n};\n\n/**\r\n * Plays a sound effect\r\n * @param {string} soundName - Name of the sound effect to play\r\n * @returns {Promise<void>} - A promise that resolves when the sound finishes playing\r\n */\nexport const playSound = soundName => {\n  return new Promise(resolve => {\n    if (!soundEnabled) {\n      resolve();\n      return;\n    }\n    const url = SOUND_EFFECTS[soundName];\n    if (!url) {\n      console.error(`Sound effect not found: ${soundName}`);\n      resolve();\n      return;\n    }\n    try {\n      let audio = audioCache[url];\n      if (!audio) {\n        // If not cached, create and cache it\n        audio = new Audio(url);\n        audioCache[url] = audio;\n      } else {\n        // Reset audio if it's already playing\n        audio.pause();\n        audio.currentTime = 0;\n      }\n\n      // Set volume\n      audio.volume = volume;\n\n      // Play the sound\n      const playPromise = audio.play();\n      if (playPromise !== undefined) {\n        playPromise.then(() => {\n          // Sound started playing successfully\n          audio.onended = () => {\n            resolve();\n          };\n        }).catch(error => {\n          // Auto-play was prevented or there was another error\n          console.error(`Error playing sound: ${soundName}`, error);\n          resolve();\n        });\n      } else {\n        // Older browsers might not return a promise\n        audio.onended = () => {\n          resolve();\n        };\n      }\n    } catch (error) {\n      console.error(`Error playing sound: ${soundName}`, error);\n      resolve();\n    }\n  });\n};\n\n/**\r\n * Plays a button click sound\r\n */\nexport const playButtonClick = () => {\n  playSound('BUTTON_CLICK');\n};\n\n/**\r\n * Plays an option select sound\r\n */\nexport const playOptionSelect = () => {\n  playSound('OPTION_SELECT');\n};\n\n/**\r\n * Plays a correct answer sound\r\n */\nexport const playCorrectAnswer = () => {\n  playSound('CORRECT_ANSWER');\n};\n\n/**\r\n * Plays an incorrect answer sound\r\n */\nexport const playIncorrectAnswer = () => {\n  playSound('INCORRECT_ANSWER');\n};\n\n/**\r\n * Plays a contradiction reveal sound\r\n */\nexport const playContradictionReveal = () => {\n  playSound('CONTRADICTION_REVEAL');\n};\n\n/**\r\n * Plays a round complete sound\r\n */\nexport const playRoundComplete = () => {\n  playSound('ROUND_COMPLETE');\n};\n\n/**\r\n * Plays a game complete sound\r\n */\nexport const playGameComplete = () => {\n  playSound('GAME_COMPLETE');\n};\n\n/**\r\n * Plays a timer tick sound\r\n */\nexport const playTimerTick = () => {\n  playSound('TIMER_TICK');\n};\n\n/**\r\n * Plays a timer expire sound\r\n */\nexport const playTimerExpire = () => {\n  playSound('TIMER_EXPIRE');\n};\n\n/**\r\n * Enables or disables sound\r\n * @param {boolean} enabled - Whether sound should be enabled\r\n */\nexport const enableSound = enabled => {\n  soundEnabled = enabled;\n};\n\n/**\r\n * Sets the volume level\r\n * @param {number} level - Volume level (0.0 to 1.0)\r\n */\nexport const setVolume = level => {\n  volume = Math.max(0, Math.min(1, level));\n};\n\n/**\r\n * Checks if sound is enabled\r\n * @returns {boolean} - Whether sound is enabled\r\n */\nexport const isSoundEnabled = () => {\n  return soundEnabled;\n};\n\n/**\r\n * Gets the current volume level\r\n * @returns {number} - Current volume level (0.0 to 1.0)\r\n */\nexport const getVolume = () => {\n  return volume;\n};\n\n/**\r\n * Stops all playing sounds\r\n */\nexport const stopAllSounds = () => {\n  Object.values(audioCache).forEach(audio => {\n    try {\n      audio.pause();\n      audio.currentTime = 0;\n    } catch (error) {\n      console.error('Error stopping sound', error);\n    }\n  });\n};","map":{"version":3,"names":["SOUND_EFFECTS","BUTTON_CLICK","OPTION_SELECT","CORRECT_ANSWER","INCORRECT_ANSWER","CONTRADICTION_REVEAL","ROUND_COMPLETE","GAME_COMPLETE","TIMER_TICK","TIMER_EXPIRE","audioCache","soundEnabled","volume","initSoundService","enabled","initialVolume","Math","max","min","Object","values","forEach","url","preloadSound","audio","Audio","load","error","console","playSound","soundName","Promise","resolve","pause","currentTime","playPromise","play","undefined","then","onended","catch","playButtonClick","playOptionSelect","playCorrectAnswer","playIncorrectAnswer","playContradictionReveal","playRoundComplete","playGameComplete","playTimerTick","playTimerExpire","enableSound","setVolume","level","isSoundEnabled","getVolume","stopAllSounds"],"sources":["C:/Users/abhay/Downloads/WordHaveNoMeaning/src/services/soundService.js"],"sourcesContent":["/**\r\n * Sound service for handling sound effects\r\n */\r\n\r\n// Sound effect URLs\r\nconst SOUND_EFFECTS = {\r\n  BUTTON_CLICK: '/sounds/button-click.mp3',\r\n  OPTION_SELECT: '/sounds/option-select.mp3',\r\n  CORRECT_ANSWER: '/sounds/correct-answer.mp3',\r\n  INCORRECT_ANSWER: '/sounds/incorrect-answer.mp3',\r\n  CONTRADICTION_REVEAL: '/sounds/contradiction-reveal.mp3',\r\n  ROUND_COMPLETE: '/sounds/round-complete.mp3',\r\n  GAME_COMPLETE: '/sounds/game-complete.mp3',\r\n  TIMER_TICK: '/sounds/timer-tick.mp3',\r\n  TIMER_EXPIRE: '/sounds/timer-expire.mp3',\r\n};\r\n\r\n// Audio objects cache\r\nconst audioCache = {};\r\n\r\n// Global sound settings\r\nlet soundEnabled = true;\r\nlet volume = 1.0;\r\n\r\n/**\r\n * Initializes the sound service\r\n * @param {boolean} enabled - Whether sound is enabled\r\n * @param {number} initialVolume - Initial volume level (0.0 to 1.0)\r\n */\r\nexport const initSoundService = (enabled = true, initialVolume = 1.0) => {\r\n  soundEnabled = enabled;\r\n  volume = Math.max(0, Math.min(1, initialVolume));\r\n  \r\n  // Preload sound effects\r\n  if (soundEnabled) {\r\n    Object.values(SOUND_EFFECTS).forEach(url => {\r\n      preloadSound(url);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Preloads a sound effect\r\n * @param {string} url - URL of the sound effect\r\n */\r\nconst preloadSound = (url) => {\r\n  if (!audioCache[url]) {\r\n    try {\r\n      const audio = new Audio(url);\r\n      audio.load();\r\n      audioCache[url] = audio;\r\n    } catch (error) {\r\n      console.error(`Error preloading sound: ${url}`, error);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Plays a sound effect\r\n * @param {string} soundName - Name of the sound effect to play\r\n * @returns {Promise<void>} - A promise that resolves when the sound finishes playing\r\n */\r\nexport const playSound = (soundName) => {\r\n  return new Promise((resolve) => {\r\n    if (!soundEnabled) {\r\n      resolve();\r\n      return;\r\n    }\r\n    \r\n    const url = SOUND_EFFECTS[soundName];\r\n    \r\n    if (!url) {\r\n      console.error(`Sound effect not found: ${soundName}`);\r\n      resolve();\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      let audio = audioCache[url];\r\n      \r\n      if (!audio) {\r\n        // If not cached, create and cache it\r\n        audio = new Audio(url);\r\n        audioCache[url] = audio;\r\n      } else {\r\n        // Reset audio if it's already playing\r\n        audio.pause();\r\n        audio.currentTime = 0;\r\n      }\r\n      \r\n      // Set volume\r\n      audio.volume = volume;\r\n      \r\n      // Play the sound\r\n      const playPromise = audio.play();\r\n      \r\n      if (playPromise !== undefined) {\r\n        playPromise\r\n          .then(() => {\r\n            // Sound started playing successfully\r\n            audio.onended = () => {\r\n              resolve();\r\n            };\r\n          })\r\n          .catch(error => {\r\n            // Auto-play was prevented or there was another error\r\n            console.error(`Error playing sound: ${soundName}`, error);\r\n            resolve();\r\n          });\r\n      } else {\r\n        // Older browsers might not return a promise\r\n        audio.onended = () => {\r\n          resolve();\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error playing sound: ${soundName}`, error);\r\n      resolve();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Plays a button click sound\r\n */\r\nexport const playButtonClick = () => {\r\n  playSound('BUTTON_CLICK');\r\n};\r\n\r\n/**\r\n * Plays an option select sound\r\n */\r\nexport const playOptionSelect = () => {\r\n  playSound('OPTION_SELECT');\r\n};\r\n\r\n/**\r\n * Plays a correct answer sound\r\n */\r\nexport const playCorrectAnswer = () => {\r\n  playSound('CORRECT_ANSWER');\r\n};\r\n\r\n/**\r\n * Plays an incorrect answer sound\r\n */\r\nexport const playIncorrectAnswer = () => {\r\n  playSound('INCORRECT_ANSWER');\r\n};\r\n\r\n/**\r\n * Plays a contradiction reveal sound\r\n */\r\nexport const playContradictionReveal = () => {\r\n  playSound('CONTRADICTION_REVEAL');\r\n};\r\n\r\n/**\r\n * Plays a round complete sound\r\n */\r\nexport const playRoundComplete = () => {\r\n  playSound('ROUND_COMPLETE');\r\n};\r\n\r\n/**\r\n * Plays a game complete sound\r\n */\r\nexport const playGameComplete = () => {\r\n  playSound('GAME_COMPLETE');\r\n};\r\n\r\n/**\r\n * Plays a timer tick sound\r\n */\r\nexport const playTimerTick = () => {\r\n  playSound('TIMER_TICK');\r\n};\r\n\r\n/**\r\n * Plays a timer expire sound\r\n */\r\nexport const playTimerExpire = () => {\r\n  playSound('TIMER_EXPIRE');\r\n};\r\n\r\n/**\r\n * Enables or disables sound\r\n * @param {boolean} enabled - Whether sound should be enabled\r\n */\r\nexport const enableSound = (enabled) => {\r\n  soundEnabled = enabled;\r\n};\r\n\r\n/**\r\n * Sets the volume level\r\n * @param {number} level - Volume level (0.0 to 1.0)\r\n */\r\nexport const setVolume = (level) => {\r\n  volume = Math.max(0, Math.min(1, level));\r\n};\r\n\r\n/**\r\n * Checks if sound is enabled\r\n * @returns {boolean} - Whether sound is enabled\r\n */\r\nexport const isSoundEnabled = () => {\r\n  return soundEnabled;\r\n};\r\n\r\n/**\r\n * Gets the current volume level\r\n * @returns {number} - Current volume level (0.0 to 1.0)\r\n */\r\nexport const getVolume = () => {\r\n  return volume;\r\n};\r\n\r\n/**\r\n * Stops all playing sounds\r\n */\r\nexport const stopAllSounds = () => {\r\n  Object.values(audioCache).forEach(audio => {\r\n    try {\r\n      audio.pause();\r\n      audio.currentTime = 0;\r\n    } catch (error) {\r\n      console.error('Error stopping sound', error);\r\n    }\r\n  });\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,aAAa,GAAG;EACpBC,YAAY,EAAE,0BAA0B;EACxCC,aAAa,EAAE,2BAA2B;EAC1CC,cAAc,EAAE,4BAA4B;EAC5CC,gBAAgB,EAAE,8BAA8B;EAChDC,oBAAoB,EAAE,kCAAkC;EACxDC,cAAc,EAAE,4BAA4B;EAC5CC,aAAa,EAAE,2BAA2B;EAC1CC,UAAU,EAAE,wBAAwB;EACpCC,YAAY,EAAE;AAChB,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG,CAAC,CAAC;;AAErB;AACA,IAAIC,YAAY,GAAG,IAAI;AACvB,IAAIC,MAAM,GAAG,GAAG;;AAEhB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,OAAO,GAAG,IAAI,EAAEC,aAAa,GAAG,GAAG,KAAK;EACvEJ,YAAY,GAAGG,OAAO;EACtBF,MAAM,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEH,aAAa,CAAC,CAAC;;EAEhD;EACA,IAAIJ,YAAY,EAAE;IAChBQ,MAAM,CAACC,MAAM,CAACpB,aAAa,CAAC,CAACqB,OAAO,CAACC,GAAG,IAAI;MAC1CC,YAAY,CAACD,GAAG,CAAC;IACnB,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAID,GAAG,IAAK;EAC5B,IAAI,CAACZ,UAAU,CAACY,GAAG,CAAC,EAAE;IACpB,IAAI;MACF,MAAME,KAAK,GAAG,IAAIC,KAAK,CAACH,GAAG,CAAC;MAC5BE,KAAK,CAACE,IAAI,CAAC,CAAC;MACZhB,UAAU,CAACY,GAAG,CAAC,GAAGE,KAAK;IACzB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2BL,GAAG,EAAE,EAAEK,KAAK,CAAC;IACxD;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,SAAS,GAAIC,SAAS,IAAK;EACtC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,IAAI,CAACrB,YAAY,EAAE;MACjBqB,OAAO,CAAC,CAAC;MACT;IACF;IAEA,MAAMV,GAAG,GAAGtB,aAAa,CAAC8B,SAAS,CAAC;IAEpC,IAAI,CAACR,GAAG,EAAE;MACRM,OAAO,CAACD,KAAK,CAAC,2BAA2BG,SAAS,EAAE,CAAC;MACrDE,OAAO,CAAC,CAAC;MACT;IACF;IAEA,IAAI;MACF,IAAIR,KAAK,GAAGd,UAAU,CAACY,GAAG,CAAC;MAE3B,IAAI,CAACE,KAAK,EAAE;QACV;QACAA,KAAK,GAAG,IAAIC,KAAK,CAACH,GAAG,CAAC;QACtBZ,UAAU,CAACY,GAAG,CAAC,GAAGE,KAAK;MACzB,CAAC,MAAM;QACL;QACAA,KAAK,CAACS,KAAK,CAAC,CAAC;QACbT,KAAK,CAACU,WAAW,GAAG,CAAC;MACvB;;MAEA;MACAV,KAAK,CAACZ,MAAM,GAAGA,MAAM;;MAErB;MACA,MAAMuB,WAAW,GAAGX,KAAK,CAACY,IAAI,CAAC,CAAC;MAEhC,IAAID,WAAW,KAAKE,SAAS,EAAE;QAC7BF,WAAW,CACRG,IAAI,CAAC,MAAM;UACV;UACAd,KAAK,CAACe,OAAO,GAAG,MAAM;YACpBP,OAAO,CAAC,CAAC;UACX,CAAC;QACH,CAAC,CAAC,CACDQ,KAAK,CAACb,KAAK,IAAI;UACd;UACAC,OAAO,CAACD,KAAK,CAAC,wBAAwBG,SAAS,EAAE,EAAEH,KAAK,CAAC;UACzDK,OAAO,CAAC,CAAC;QACX,CAAC,CAAC;MACN,CAAC,MAAM;QACL;QACAR,KAAK,CAACe,OAAO,GAAG,MAAM;UACpBP,OAAO,CAAC,CAAC;QACX,CAAC;MACH;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwBG,SAAS,EAAE,EAAEH,KAAK,CAAC;MACzDK,OAAO,CAAC,CAAC;IACX;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMS,eAAe,GAAGA,CAAA,KAAM;EACnCZ,SAAS,CAAC,cAAc,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMa,gBAAgB,GAAGA,CAAA,KAAM;EACpCb,SAAS,CAAC,eAAe,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;EACrCd,SAAS,CAAC,gBAAgB,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMe,mBAAmB,GAAGA,CAAA,KAAM;EACvCf,SAAS,CAAC,kBAAkB,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMgB,uBAAuB,GAAGA,CAAA,KAAM;EAC3ChB,SAAS,CAAC,sBAAsB,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMiB,iBAAiB,GAAGA,CAAA,KAAM;EACrCjB,SAAS,CAAC,gBAAgB,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMkB,gBAAgB,GAAGA,CAAA,KAAM;EACpClB,SAAS,CAAC,eAAe,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMmB,aAAa,GAAGA,CAAA,KAAM;EACjCnB,SAAS,CAAC,YAAY,CAAC;AACzB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMoB,eAAe,GAAGA,CAAA,KAAM;EACnCpB,SAAS,CAAC,cAAc,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMqB,WAAW,GAAIpC,OAAO,IAAK;EACtCH,YAAY,GAAGG,OAAO;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMqC,SAAS,GAAIC,KAAK,IAAK;EAClCxC,MAAM,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEkC,KAAK,CAAC,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAO1C,YAAY;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAM2C,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO1C,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAM2C,aAAa,GAAGA,CAAA,KAAM;EACjCpC,MAAM,CAACC,MAAM,CAACV,UAAU,CAAC,CAACW,OAAO,CAACG,KAAK,IAAI;IACzC,IAAI;MACFA,KAAK,CAACS,KAAK,CAAC,CAAC;MACbT,KAAK,CAACU,WAAW,GAAG,CAAC;IACvB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}