{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhay\\\\Downloads\\\\WordsEmptyMeaning\\\\src\\\\components\\\\game\\\\TimerDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport { playTimerTick, playTimerExpire } from '../../services/soundService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pulse = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: var(--spacing-md);\n`;\n_c = Container;\nconst TimerCircle = styled.div`\n  position: relative;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background-color: white;\n  border: 2px solid #e0e0e0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  ${props => props.warning && css`\n    border-color: var(--color-accent);\n  `}\n  \n  ${props => props.critical && css`\n    border-color: var(--color-error);\n    animation: ${pulse} 1s infinite;\n  `}\n`;\n_c2 = TimerCircle;\nconst TimerFill = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: ${props => {\n  if (props.critical) return 'rgba(214, 64, 69, 0.2)';\n  if (props.warning) return 'rgba(243, 146, 55, 0.2)';\n  return 'rgba(74, 111, 165, 0.1)';\n}};\n  clip-path: ${props => `polygon(50% 50%, 50% 0%, ${getCoordinatesForPercent(props.percent)} 50% 50%)`};\n  transform: rotate(-90deg);\n`;\n_c3 = TimerFill;\nconst TimerText = styled.div`\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: ${props => {\n  if (props.critical) return 'var(--color-error)';\n  if (props.warning) return 'var(--color-accent)';\n  return 'var(--color-text)';\n}};\n  z-index: 1;\n`;\n\n/**\r\n * Helper function to get coordinates for percent of circle\r\n * @param {number} percent - Percent of circle (0-1)\r\n * @returns {string} - Coordinates for clip-path\r\n */\n_c4 = TimerText;\nfunction getCoordinatesForPercent(percent) {\n  // Start at the top of the circle (0%)\n  // Move clockwise around the circle\n  const x = Math.cos(2 * Math.PI * percent);\n  const y = Math.sin(2 * Math.PI * percent);\n\n  // Convert to coordinates in the 100x100 space\n  const coordX = 50 + 50 * x;\n  const coordY = 50 + 50 * y;\n  return `${coordX}% ${coordY}%, `;\n}\n\n/**\r\n * TimerDisplay component for showing countdown timer\r\n * @param {Object} props - Component props\r\n * @param {number} props.timeRemaining - Time remaining in seconds\r\n * @param {number} props.timeLimit - Total time limit in seconds\r\n * @param {Function} props.onTimeExpired - Callback when timer expires\r\n * @returns {JSX.Element} - Rendered component\r\n */\nconst TimerDisplay = ({\n  timeRemaining,\n  timeLimit,\n  onTimeExpired\n}) => {\n  _s();\n  const [playedWarningSound, setPlayedWarningSound] = useState(false);\n  const [playedCriticalSound, setPlayedCriticalSound] = useState(false);\n  const [internalTime, setInternalTime] = useState(timeRemaining);\n  const lastUpdateTimeRef = useRef(Date.now());\n  const requestRef = useRef(null);\n\n  // Calculate percentage of time remaining\n  const percent = timeLimit > 0 ? internalTime / timeLimit : 1;\n\n  // Determine warning states\n  const isWarning = percent <= 0.5 && percent > 0.25;\n  const isCritical = percent <= 0.25;\n\n  // Use requestAnimationFrame for more accurate timing\n  const updateTimer = () => {\n    const now = Date.now();\n    const deltaTime = (now - lastUpdateTimeRef.current) / 1000; // Convert to seconds\n    lastUpdateTimeRef.current = now;\n    setInternalTime(prevTime => {\n      const newTime = Math.max(0, prevTime - deltaTime);\n      return newTime;\n    });\n    requestRef.current = requestAnimationFrame(updateTimer);\n  };\n\n  // Initialize and clean up the animation frame\n  useEffect(() => {\n    setInternalTime(timeRemaining);\n    lastUpdateTimeRef.current = Date.now();\n    requestRef.current = requestAnimationFrame(updateTimer);\n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, [timeRemaining]);\n\n  // Play sound effects at certain thresholds\n  useEffect(() => {\n    if (isWarning && !playedWarningSound) {\n      playTimerTick();\n      setPlayedWarningSound(true);\n    }\n    if (isCritical && !playedCriticalSound) {\n      playTimerTick();\n      setPlayedCriticalSound(true);\n    }\n    if (internalTime <= 0) {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n      playTimerExpire();\n      if (onTimeExpired) {\n        onTimeExpired();\n      }\n    }\n  }, [internalTime, isWarning, isCritical, playedWarningSound, playedCriticalSound, onTimeExpired]);\n\n  // Reset sound state when timer resets\n  useEffect(() => {\n    if (percent > 0.5) {\n      setPlayedWarningSound(false);\n      setPlayedCriticalSound(false);\n    }\n  }, [percent]);\n\n  // Format time for screen readers\n  const formatTimeForScreenReader = seconds => {\n    const wholeSeconds = Math.ceil(seconds);\n    return `${wholeSeconds} ${wholeSeconds === 1 ? 'second' : 'seconds'} remaining`;\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(TimerCircle, {\n      warning: isWarning,\n      critical: isCritical,\n      role: \"timer\",\n      \"aria-label\": formatTimeForScreenReader(internalTime),\n      \"aria-live\": isCritical ? \"assertive\" : \"polite\",\n      children: [/*#__PURE__*/_jsxDEV(TimerFill, {\n        percent: percent,\n        warning: isWarning,\n        critical: isCritical\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TimerText, {\n        warning: isWarning,\n        critical: isCritical,\n        children: Math.ceil(internalTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(TimerDisplay, \"m0NWPw+CJEhpr1DtrCHAs27g3EA=\");\n_c5 = TimerDisplay;\nexport default TimerDisplay;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"TimerCircle\");\n$RefreshReg$(_c3, \"TimerFill\");\n$RefreshReg$(_c4, \"TimerText\");\n$RefreshReg$(_c5, \"TimerDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useRef","styled","css","keyframes","playTimerTick","playTimerExpire","jsxDEV","_jsxDEV","pulse","Container","div","_c","TimerCircle","props","warning","critical","_c2","TimerFill","getCoordinatesForPercent","percent","_c3","TimerText","_c4","x","Math","cos","PI","y","sin","coordX","coordY","TimerDisplay","timeRemaining","timeLimit","onTimeExpired","_s","playedWarningSound","setPlayedWarningSound","playedCriticalSound","setPlayedCriticalSound","internalTime","setInternalTime","lastUpdateTimeRef","Date","now","requestRef","isWarning","isCritical","updateTimer","deltaTime","current","prevTime","newTime","max","requestAnimationFrame","cancelAnimationFrame","formatTimeForScreenReader","seconds","wholeSeconds","ceil","children","role","fileName","_jsxFileName","lineNumber","columnNumber","_c5","$RefreshReg$"],"sources":["C:/Users/abhay/Downloads/WordsEmptyMeaning/src/components/game/TimerDisplay.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport styled, { css, keyframes } from 'styled-components';\r\nimport { playTimerTick, playTimerExpire } from '../../services/soundService';\r\n\r\nconst pulse = keyframes`\r\n  0% {\r\n    transform: scale(1);\r\n  }\r\n  50% {\r\n    transform: scale(1.05);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: var(--spacing-md);\r\n`;\r\n\r\nconst TimerCircle = styled.div`\r\n  position: relative;\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  background-color: white;\r\n  border: 2px solid #e0e0e0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  ${props => props.warning && css`\r\n    border-color: var(--color-accent);\r\n  `}\r\n  \r\n  ${props => props.critical && css`\r\n    border-color: var(--color-error);\r\n    animation: ${pulse} 1s infinite;\r\n  `}\r\n`;\r\n\r\nconst TimerFill = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 50%;\r\n  background-color: ${props => {\r\n    if (props.critical) return 'rgba(214, 64, 69, 0.2)';\r\n    if (props.warning) return 'rgba(243, 146, 55, 0.2)';\r\n    return 'rgba(74, 111, 165, 0.1)';\r\n  }};\r\n  clip-path: ${props => `polygon(50% 50%, 50% 0%, ${getCoordinatesForPercent(props.percent)} 50% 50%)`};\r\n  transform: rotate(-90deg);\r\n`;\r\n\r\nconst TimerText = styled.div`\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  color: ${props => {\r\n    if (props.critical) return 'var(--color-error)';\r\n    if (props.warning) return 'var(--color-accent)';\r\n    return 'var(--color-text)';\r\n  }};\r\n  z-index: 1;\r\n`;\r\n\r\n/**\r\n * Helper function to get coordinates for percent of circle\r\n * @param {number} percent - Percent of circle (0-1)\r\n * @returns {string} - Coordinates for clip-path\r\n */\r\nfunction getCoordinatesForPercent(percent) {\r\n  // Start at the top of the circle (0%)\r\n  // Move clockwise around the circle\r\n  const x = Math.cos(2 * Math.PI * percent);\r\n  const y = Math.sin(2 * Math.PI * percent);\r\n  \r\n  // Convert to coordinates in the 100x100 space\r\n  const coordX = 50 + 50 * x;\r\n  const coordY = 50 + 50 * y;\r\n  \r\n  return `${coordX}% ${coordY}%, `;\r\n}\r\n\r\n/**\r\n * TimerDisplay component for showing countdown timer\r\n * @param {Object} props - Component props\r\n * @param {number} props.timeRemaining - Time remaining in seconds\r\n * @param {number} props.timeLimit - Total time limit in seconds\r\n * @param {Function} props.onTimeExpired - Callback when timer expires\r\n * @returns {JSX.Element} - Rendered component\r\n */\r\nconst TimerDisplay = ({ timeRemaining, timeLimit, onTimeExpired }) => {\r\n  const [playedWarningSound, setPlayedWarningSound] = useState(false);\r\n  const [playedCriticalSound, setPlayedCriticalSound] = useState(false);\r\n  const [internalTime, setInternalTime] = useState(timeRemaining);\r\n  const lastUpdateTimeRef = useRef(Date.now());\r\n  const requestRef = useRef(null);\r\n  \r\n  // Calculate percentage of time remaining\r\n  const percent = timeLimit > 0 ? internalTime / timeLimit : 1;\r\n  \r\n  // Determine warning states\r\n  const isWarning = percent <= 0.5 && percent > 0.25;\r\n  const isCritical = percent <= 0.25;\r\n  \r\n  // Use requestAnimationFrame for more accurate timing\r\n  const updateTimer = () => {\r\n    const now = Date.now();\r\n    const deltaTime = (now - lastUpdateTimeRef.current) / 1000; // Convert to seconds\r\n    lastUpdateTimeRef.current = now;\r\n    \r\n    setInternalTime(prevTime => {\r\n      const newTime = Math.max(0, prevTime - deltaTime);\r\n      return newTime;\r\n    });\r\n    \r\n    requestRef.current = requestAnimationFrame(updateTimer);\r\n  };\r\n  \r\n  // Initialize and clean up the animation frame\r\n  useEffect(() => {\r\n    setInternalTime(timeRemaining);\r\n    lastUpdateTimeRef.current = Date.now();\r\n    requestRef.current = requestAnimationFrame(updateTimer);\r\n    \r\n    return () => {\r\n      if (requestRef.current) {\r\n        cancelAnimationFrame(requestRef.current);\r\n      }\r\n    };\r\n  }, [timeRemaining]);\r\n  \r\n  // Play sound effects at certain thresholds\r\n  useEffect(() => {\r\n    if (isWarning && !playedWarningSound) {\r\n      playTimerTick();\r\n      setPlayedWarningSound(true);\r\n    }\r\n    \r\n    if (isCritical && !playedCriticalSound) {\r\n      playTimerTick();\r\n      setPlayedCriticalSound(true);\r\n    }\r\n    \r\n    if (internalTime <= 0) {\r\n      if (requestRef.current) {\r\n        cancelAnimationFrame(requestRef.current);\r\n      }\r\n      playTimerExpire();\r\n      if (onTimeExpired) {\r\n        onTimeExpired();\r\n      }\r\n    }\r\n  }, [internalTime, isWarning, isCritical, playedWarningSound, playedCriticalSound, onTimeExpired]);\r\n  \r\n  // Reset sound state when timer resets\r\n  useEffect(() => {\r\n    if (percent > 0.5) {\r\n      setPlayedWarningSound(false);\r\n      setPlayedCriticalSound(false);\r\n    }\r\n  }, [percent]);\r\n  \r\n  // Format time for screen readers\r\n  const formatTimeForScreenReader = (seconds) => {\r\n    const wholeSeconds = Math.ceil(seconds);\r\n    return `${wholeSeconds} ${wholeSeconds === 1 ? 'second' : 'seconds'} remaining`;\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <TimerCircle\r\n        warning={isWarning}\r\n        critical={isCritical}\r\n        role=\"timer\"\r\n        aria-label={formatTimeForScreenReader(internalTime)}\r\n        aria-live={isCritical ? \"assertive\" : \"polite\"}\r\n      >\r\n        <TimerFill\r\n          percent={percent}\r\n          warning={isWarning}\r\n          critical={isCritical}\r\n        />\r\n        <TimerText\r\n          warning={isWarning}\r\n          critical={isCritical}\r\n        >\r\n          {Math.ceil(internalTime)}\r\n        </TimerText>\r\n      </TimerCircle>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TimerDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}