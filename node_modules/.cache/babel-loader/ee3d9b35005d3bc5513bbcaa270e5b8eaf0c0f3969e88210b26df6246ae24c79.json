{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Initial state\nconst initialState = {\n  settings: {\n    defaultDifficulty: 'medium',\n    defaultRoundCount: 10,\n    defaultTimeLimit: 30,\n    soundEnabled: true,\n    theme: 'default',\n    accessibility: {\n      highContrast: false,\n      largeText: false,\n      reducedMotion: false,\n      screenReaderOptimized: false\n    }\n  },\n  progress: {\n    gamesPlayed: 0,\n    totalScore: 0,\n    averageScore: 0,\n    wordsEncountered: [],\n    conceptsLearned: [],\n    difficultyProgression: {\n      easy: 0,\n      medium: 0,\n      hard: 0\n    },\n    lastPlayed: null\n  },\n  hasSeenTutorial: false\n};\n\n// Create slice\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    updateSettings: (state, action) => {\n      state.settings = {\n        ...state.settings,\n        ...action.payload\n      };\n    },\n    updateAccessibilitySettings: (state, action) => {\n      state.settings.accessibility = {\n        ...state.settings.accessibility,\n        ...action.payload\n      };\n    },\n    markTutorialSeen: state => {\n      state.hasSeenTutorial = true;\n    },\n    recordGamePlayed: (state, action) => {\n      const {\n        score,\n        difficulty,\n        wordsEncountered,\n        conceptsLearned\n      } = action.payload;\n\n      // Update games played\n      state.progress.gamesPlayed += 1;\n\n      // Update score\n      state.progress.totalScore += score;\n      state.progress.averageScore = state.progress.totalScore / state.progress.gamesPlayed;\n\n      // Update difficulty progression\n      if (difficulty && state.progress.difficultyProgression[difficulty] !== undefined) {\n        state.progress.difficultyProgression[difficulty] += 1;\n      }\n\n      // Update words encountered\n      if (wordsEncountered && Array.isArray(wordsEncountered)) {\n        const newWords = wordsEncountered.filter(word => !state.progress.wordsEncountered.includes(word));\n        state.progress.wordsEncountered = [...state.progress.wordsEncountered, ...newWords];\n      }\n\n      // Update concepts learned\n      if (conceptsLearned && Array.isArray(conceptsLearned)) {\n        const newConcepts = conceptsLearned.filter(concept => !state.progress.conceptsLearned.includes(concept));\n        state.progress.conceptsLearned = [...state.progress.conceptsLearned, ...newConcepts];\n      }\n\n      // Update last played\n      state.progress.lastPlayed = new Date().toISOString();\n    },\n    resetProgress: state => {\n      state.progress = initialState.progress;\n    }\n  }\n});\n\n// Export actions and reducer\nexport const {\n  updateSettings,\n  updateAccessibilitySettings,\n  markTutorialSeen,\n  recordGamePlayed,\n  resetProgress\n} = userSlice.actions;\nexport default userSlice.reducer;\n\n// Selectors\nexport const selectUserSettings = state => state.user.settings;\nexport const selectAccessibilitySettings = state => state.user.settings.accessibility;\nexport const selectDefaultDifficulty = state => state.user.settings.defaultDifficulty;\nexport const selectDefaultRoundCount = state => state.user.settings.defaultRoundCount;\nexport const selectDefaultTimeLimit = state => state.user.settings.defaultTimeLimit;\nexport const selectSoundEnabled = state => state.user.settings.soundEnabled;\nexport const selectUserTheme = state => state.user.settings.theme;\nexport const selectHasSeenTutorial = state => state.user.hasSeenTutorial;\nexport const selectUserProgress = state => state.user.progress;\nexport const selectGamesPlayed = state => state.user.progress.gamesPlayed;\nexport const selectTotalScore = state => state.user.progress.totalScore;\nexport const selectAverageScore = state => state.user.progress.averageScore;\nexport const selectWordsEncountered = state => state.user.progress.wordsEncountered;\nexport const selectConceptsLearned = state => state.user.progress.conceptsLearned;\nexport const selectDifficultyProgression = state => state.user.progress.difficultyProgression;\nexport const selectLastPlayed = state => state.user.progress.lastPlayed;","map":{"version":3,"names":["createSlice","initialState","settings","defaultDifficulty","defaultRoundCount","defaultTimeLimit","soundEnabled","theme","accessibility","highContrast","largeText","reducedMotion","screenReaderOptimized","progress","gamesPlayed","totalScore","averageScore","wordsEncountered","conceptsLearned","difficultyProgression","easy","medium","hard","lastPlayed","hasSeenTutorial","userSlice","name","reducers","updateSettings","state","action","payload","updateAccessibilitySettings","markTutorialSeen","recordGamePlayed","score","difficulty","undefined","Array","isArray","newWords","filter","word","includes","newConcepts","concept","Date","toISOString","resetProgress","actions","reducer","selectUserSettings","user","selectAccessibilitySettings","selectDefaultDifficulty","selectDefaultRoundCount","selectDefaultTimeLimit","selectSoundEnabled","selectUserTheme","selectHasSeenTutorial","selectUserProgress","selectGamesPlayed","selectTotalScore","selectAverageScore","selectWordsEncountered","selectConceptsLearned","selectDifficultyProgression","selectLastPlayed"],"sources":["C:/Users/abhay/Downloads/WordsEmptyMeaning/src/store/slices/userSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  settings: {\r\n    defaultDifficulty: 'medium',\r\n    defaultRoundCount: 10,\r\n    defaultTimeLimit: 30,\r\n    soundEnabled: true,\r\n    theme: 'default',\r\n    accessibility: {\r\n      highContrast: false,\r\n      largeText: false,\r\n      reducedMotion: false,\r\n      screenReaderOptimized: false,\r\n    },\r\n  },\r\n  progress: {\r\n    gamesPlayed: 0,\r\n    totalScore: 0,\r\n    averageScore: 0,\r\n    wordsEncountered: [],\r\n    conceptsLearned: [],\r\n    difficultyProgression: {\r\n      easy: 0,\r\n      medium: 0,\r\n      hard: 0,\r\n    },\r\n    lastPlayed: null,\r\n  },\r\n  hasSeenTutorial: false,\r\n};\r\n\r\n// Create slice\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    updateSettings: (state, action) => {\r\n      state.settings = {\r\n        ...state.settings,\r\n        ...action.payload,\r\n      };\r\n    },\r\n    updateAccessibilitySettings: (state, action) => {\r\n      state.settings.accessibility = {\r\n        ...state.settings.accessibility,\r\n        ...action.payload,\r\n      };\r\n    },\r\n    markTutorialSeen: (state) => {\r\n      state.hasSeenTutorial = true;\r\n    },\r\n    recordGamePlayed: (state, action) => {\r\n      const { score, difficulty, wordsEncountered, conceptsLearned } = action.payload;\r\n      \r\n      // Update games played\r\n      state.progress.gamesPlayed += 1;\r\n      \r\n      // Update score\r\n      state.progress.totalScore += score;\r\n      state.progress.averageScore = state.progress.totalScore / state.progress.gamesPlayed;\r\n      \r\n      // Update difficulty progression\r\n      if (difficulty && state.progress.difficultyProgression[difficulty] !== undefined) {\r\n        state.progress.difficultyProgression[difficulty] += 1;\r\n      }\r\n      \r\n      // Update words encountered\r\n      if (wordsEncountered && Array.isArray(wordsEncountered)) {\r\n        const newWords = wordsEncountered.filter(word => !state.progress.wordsEncountered.includes(word));\r\n        state.progress.wordsEncountered = [...state.progress.wordsEncountered, ...newWords];\r\n      }\r\n      \r\n      // Update concepts learned\r\n      if (conceptsLearned && Array.isArray(conceptsLearned)) {\r\n        const newConcepts = conceptsLearned.filter(concept => !state.progress.conceptsLearned.includes(concept));\r\n        state.progress.conceptsLearned = [...state.progress.conceptsLearned, ...newConcepts];\r\n      }\r\n      \r\n      // Update last played\r\n      state.progress.lastPlayed = new Date().toISOString();\r\n    },\r\n    resetProgress: (state) => {\r\n      state.progress = initialState.progress;\r\n    },\r\n  },\r\n});\r\n\r\n// Export actions and reducer\r\nexport const {\r\n  updateSettings,\r\n  updateAccessibilitySettings,\r\n  markTutorialSeen,\r\n  recordGamePlayed,\r\n  resetProgress,\r\n} = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n\r\n// Selectors\r\nexport const selectUserSettings = (state) => state.user.settings;\r\nexport const selectAccessibilitySettings = (state) => state.user.settings.accessibility;\r\nexport const selectDefaultDifficulty = (state) => state.user.settings.defaultDifficulty;\r\nexport const selectDefaultRoundCount = (state) => state.user.settings.defaultRoundCount;\r\nexport const selectDefaultTimeLimit = (state) => state.user.settings.defaultTimeLimit;\r\nexport const selectSoundEnabled = (state) => state.user.settings.soundEnabled;\r\nexport const selectUserTheme = (state) => state.user.settings.theme;\r\nexport const selectHasSeenTutorial = (state) => state.user.hasSeenTutorial;\r\nexport const selectUserProgress = (state) => state.user.progress;\r\nexport const selectGamesPlayed = (state) => state.user.progress.gamesPlayed;\r\nexport const selectTotalScore = (state) => state.user.progress.totalScore;\r\nexport const selectAverageScore = (state) => state.user.progress.averageScore;\r\nexport const selectWordsEncountered = (state) => state.user.progress.wordsEncountered;\r\nexport const selectConceptsLearned = (state) => state.user.progress.conceptsLearned;\r\nexport const selectDifficultyProgression = (state) => state.user.progress.difficultyProgression;\r\nexport const selectLastPlayed = (state) => state.user.progress.lastPlayed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}